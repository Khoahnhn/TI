package mongo

import (
	"context"

	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	"go.mongodb.org/mongo-driver/bson"
)

type cveConfigRepository struct {
	model mongo.Database
}

func NewCveConfigRepository(conf mongo.Config) CVEConfigRepository {
	con, err := mongo.NewService(conf)
	if err != nil {
		panic(err)
	}
	// Success
	return &cveConfigRepository{model: con}
}

func (inst *cveConfigRepository) Name() (string, string) {
	// Success
	return defs.DatabaseCrawler, defs.CollectionNvdCve
}

func (inst *cveConfigRepository) GetByID(ctx context.Context, id string) (*model.NvdCve, error) {
	var document model.NvdCve
	db, col := inst.Name()
	query := &bson.M{"id": id}
	if err := inst.model.FindOne(db, col, query, []string{}, 0, &document); err != nil {
		return nil, err
	}
	// Success
	return &document, nil
}

func (inst *cveConfigRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.NvdCve, error) {
	db, col := inst.Name()
	var documents []*model.NvdCve
	if _, err := inst.model.FindMany(db, col, query, sorts, offset, size, &documents); err != nil {
		return nil, err
	}
	// Success
	return documents, nil
}

func (inst *cveConfigRepository) FindAll(ctx context.Context, query *bson.M, sorts []string) ([]*model.NvdCve, error) {
	var size int64 = 0
	var offset int64 = 0
	if value := ctx.Value("size"); value != nil {
		size = value.(int64)
	}
	if size == 0 {
		size = 100
	}
	if value := ctx.Value("offset"); value != nil {
		offset = value.(int64)
	}
	results := make([]*model.NvdCve, 0)
	results, err := inst.Find(ctx, query, sorts, offset, size)
	if err != nil || len(results) == 0 {
		return results, err
	}
	// Recursive
	ctx = context.WithValue(ctx, "size", size)
	ctx = context.WithValue(ctx, "offset", offset+size)
	recursiveResults, err := inst.FindAll(ctx, query, sorts)
	if err != nil || len(recursiveResults) == 0 {
		return results, nil
	}
	// Success
	return append(results, recursiveResults...), nil
}

func (inst *cveConfigRepository) Store(ctx context.Context, document *model.NvdCve) error {
	db, col := inst.Name()
	if err := inst.model.InsertOne(db, col, document); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveConfigRepository) UpdateOne(ctx context.Context, document *model.NvdCve) error {
	db, col := inst.Name()
	query := &bson.M{"id": document.ID}
	if err := inst.model.UpdateOne(db, col, query, &bson.M{"$set": document}, false); err != nil {
		return err
	}
	// Success
	return nil
}
