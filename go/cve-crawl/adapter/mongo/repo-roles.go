package mongo

import (
	"context"
	"errors"

	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	"go.mongodb.org/mongo-driver/bson"
)

type rolesRepository struct {
	con mongo.Database
}

func NewRoleRepository(conf mongo.Config) RolesRepository {
	// Success
	con, err := mongo.NewService(conf)
	if err != nil {
		panic(err)
	}
	return &rolesRepository{con: con}
}

func (inst *rolesRepository) Name() (string, string) {
	// Success
	return defs.DatabaseTIAccount, defs.CollectionRoles
}

func (inst *rolesRepository) GetByName(ctx context.Context, name string) (*model.Role, error) {
	query := &bson.M{"role_id": name}
	results, err := inst.Find(ctx, query, []string{}, 0, 1)
	if err != nil {
		return nil, err
	}
	if len(results) == 0 {
		return nil, errors.New(mongo.NotFoundError)
	}
	// Success
	return results[0], nil
}

func (inst *rolesRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.Role, error) {
	if size == 0 {
		size = 10
	}
	database, collection := inst.Name()
	results := make([]*model.Role, 0)
	_, err := inst.con.FindMany(
		database,
		collection,
		query,
		sorts,
		offset,
		size,
		&results)
	if err != nil {
		return nil, err
	}
	// Success
	return results, nil
}

func (inst *rolesRepository) FindAll(ctx context.Context, query *bson.M, sorts []string) ([]*model.Role, error) {
	database, collection := inst.Name()
	var results []*model.Role
	if _, err := inst.con.FindMany(
		database,
		collection,
		query,
		sorts,
		0,
		0,
		&results,
	); err != nil {
		return nil, err
	}
	// Success
	return results, nil
}
