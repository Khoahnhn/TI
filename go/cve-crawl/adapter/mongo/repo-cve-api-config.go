package mongo

import (
	"context"

	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	"go.mongodb.org/mongo-driver/bson"
)

type cveConfigAPIRepository struct {
	model mongo.Database
}

func NewCveConfigAPIRepository(conf mongo.Config) CVEAPIConfigRepository {
	con, err := mongo.NewService(conf)
	if err != nil {
		panic(err)
	}
	// Success
	return &cveConfigAPIRepository{model: con}
}

func (inst *cveConfigAPIRepository) Name() (string, string) {
	// Success
	return defs.DatabaseCrawler, defs.CollectionNvdCveApi
}
func (inst *cveConfigAPIRepository) GetOne(ctx context.Context) (model.NvdCveAPI, error) {
	var document model.NvdCveAPI
	db, col := inst.Name()
	if err := inst.model.FindOne(db, col, &bson.M{}, []string{}, 0, &document); err != nil {
		return document, err
	}
	// Success
	return document, nil
}
func (inst *cveConfigAPIRepository) Store(ctx context.Context, document model.NvdCveAPI) error {
	db, col := inst.Name()
	if err := inst.model.InsertOne(db, col, &document); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveConfigAPIRepository) UpdateOne(ctx context.Context, document model.NvdCveAPI) error {
	db, col := inst.Name()
	query := &bson.M{"id": document.ID}
	if err := inst.model.UpdateOne(db, col, query, &bson.M{"$set": document}, false); err != nil {
		return err
	}
	// Success
	return nil
}
