package mongo

import (
	"context"

	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	"go.mongodb.org/mongo-driver/bson"
)

type groupUserRepository struct {
	con mongo.Database
}

func NewGroupUserRepository(conf mongo.Config) GroupUserRepository {
	// Success
	con, err := mongo.NewService(conf)
	if err != nil {
		panic(err)
	}
	return &groupUserRepository{con: con}
}

func (inst *groupUserRepository) Name() (string, string) {
	// Success
	return defs.DatabaseTIAccount, defs.CollectionGroupUser
}

func (inst *groupUserRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.GroupUser, error) {
	if size == 0 {
		size = 10
	}
	database, collection := inst.Name()
	results := make([]*model.GroupUser, 0)
	_, err := inst.con.FindMany(
		database,
		collection,
		query,
		sorts,
		offset,
		size,
		&results)
	if err != nil {
		return nil, err
	}
	// Success
	return results, nil
}

func (inst *groupUserRepository) FindAll(ctx context.Context, query *bson.M, sorts []string) ([]*model.GroupUser, error) {
	database, collection := inst.Name()
	var results []*model.GroupUser
	if _, err := inst.con.FindMany(
		database,
		collection,
		query,
		sorts,
		0,
		0,
		&results,
	); err != nil {
		return nil, err
	}
	// Success
	return results, nil
}
