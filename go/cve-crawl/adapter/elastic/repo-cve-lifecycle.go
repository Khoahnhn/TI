package elastic

import (
	"context"
	"log"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"

	"cve-crawler/defs"
	"cve-crawler/model"
)

type cveLifecycleRepository struct {
	con elastic.Service
}

func NewCVELifecycleRepository(conf elastic.Config) CVELifecycleRepository {
	// Success
	return &cveLifecycleRepository{con: elastic.NewService(conf)}
}

func (inst *cveLifecycleRepository) Name() string {
	// Success
	return defs.IndexCveLifeCycle
}

func (inst *cveLifecycleRepository) Store(ctx context.Context, document *model.CVELifecycle) error {
	if err := inst.con.InsertOne(inst.Name(), "", document); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveLifecycleRepository) StoreMany(ctx context.Context, documents []*model.CVELifecycle) error {
	docs := make([]elastic.Document, len(documents))
	for i, doc := range documents {
		docs[i] = doc
	}
	if err := inst.con.InsertMany(inst.Name(), "", docs); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveLifecycleRepository) FindBySource(ctx context.Context, id string, source model.CVELifecycleSource) ([]*model.CVELifecycle, error) {
	query := map[string]interface{}{
		"bool": map[string]interface{}{
			"must": []interface{}{
				map[string]interface{}{
					"term": map[string]interface{}{
						"cve_id": id,
					},
				},
				map[string]interface{}{
					"term": map[string]interface{}{
						"source": source,
					},
				},
			},
		},
	}
	results := make([]*model.CVELifecycle, 0)
	_, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query,
		[]string{},
		0,
		10,
		&results)
	if err != nil {
		log.Printf("cve lifcecyle of id %s err, reason: %v\n", id, err)
	}
	// Success
	return results, nil
}
