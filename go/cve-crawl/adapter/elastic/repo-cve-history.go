package elastic

import (
	"context"

	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
)

type cveHistoryRepository struct {
	con elastic.Service
}

func NewCVEHistoryRepository(conf elastic.Config) *cveHistoryRepository {
	return &cveHistoryRepository{con: elastic.NewService(conf)}
}
func (inst *cveHistoryRepository) Name() string {
	// Success
	return defs.IndexCVEHistory
}

func (inst *cveHistoryRepository) GetCVEHistoryByCVEIdAndAction(ctx context.Context, cveID string) ([]*model.CVEHistory, error) {
	results := make([]*model.CVEHistory, 0)
	query := map[string]interface{}{
		"bool": map[string]interface{}{
			"should": []interface{}{
				map[string]interface{}{
					"term": map[string]interface{}{
						"document": cveID,
					},
				},
			},
		},
	}
	if _, err := inst.con.FindOffset(inst.Name(), "", query, []string{"created"}, 0, 10, &results); err != nil {
		return nil, err
	}

	return results, nil
}
