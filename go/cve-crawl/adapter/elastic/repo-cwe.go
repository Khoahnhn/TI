package elastic

import (
	"context"
	"cve-crawler/defs"
	"cve-crawler/model"
	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
)

type cweDataRepository struct {
	con elastic.Service
}

func NewCWERepository(config elastic.Config) CWERepository {
	// Success
	return &cweDataRepository{con: elastic.NewService(config)}
}

func (inst *cweDataRepository) Name() string {
	// Success
	return defs.IndexCWE
}

func (inst *cweDataRepository) GetByCWEId(ctx context.Context, cweId string) (*model.CWE, error) {
	var result model.CWE
	query := map[string]interface{}{
		"term": map[string]interface{}{
			"cwe_id": cweId,
		},
	}
	err := inst.con.FindOne(
		inst.Name(),
		"",
		query,
		[]string{},
		&result)
	if err != nil {
		return nil, err
	}
	// Success
	return &result, nil
}

func (inst *cweDataRepository) StoreAll(ctx context.Context, documents []*model.CWE) error {
	if len(documents) == 0 {
		return nil
	}
	docs := make([]elastic.Document, 0)
	for _, document := range documents {
		docs = append(docs, document)
	}
	if err := inst.con.InsertMany(inst.Name(), "", docs); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cweDataRepository) UpdateMany(ctx context.Context, updates []elastic.UpdateDocument) error {
	if err := inst.con.UpdateMany(inst.Name(), "", updates); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cweDataRepository) FindByCWEIds(ctx context.Context, cweids []string) ([]*model.CWE, error) {
	query := map[string]interface{}{
		"terms": map[string]interface{}{
			"cwe_id": cweids,
		},
	}
	// Success
	return inst.Find(ctx, query, []string{}, 0, len(cweids))
}

func (inst *cweDataRepository) Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CWE, error) {
	if size == 0 {
		size = 10
	}
	results := make([]*model.CWE, 0)
	_, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		sorts,
		offset,
		size,
		&results)
	if err != nil {
		return nil, err
	}
	// Success
	return results, nil
}
