package elastic

import (
	"context"
	"cve-crawler/defs"
	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
)

type cveDataRepository struct {
	model elastic.Service
}

func NewCVERepository(config elastic.Config) CVERepository {
	// Success
	return &cveDataRepository{model: elastic.NewService(config)}
}

func (inst *cveDataRepository) Name() string {
	// Success
	return defs.IndexCVE
}

func (inst *cveDataRepository) GetByID(ctx context.Context, id string) (*model.CVE, error) {
	var document model.CVE
	if err := inst.model.Get(inst.Name(), "", id, &document); err != nil {
		return nil, err
	}
	// Success
	return &document, nil
}

func (inst *cveDataRepository) GetByName(ctx context.Context, name string) (*model.CVE, error) {
	var result model.CVE
	query := map[string]interface{}{
		"match": map[string]interface{}{
			"name": name,
		},
	}
	err := inst.model.FindOne(
		inst.Name(),
		"",
		query,
		[]string{},
		&result)
	if err != nil {
		return nil, err
	}
	// Success
	return &result, nil
}

func (inst *cveDataRepository) FindByNames(ctx context.Context, names []string) ([]*model.CVE, error) {
	query := map[string]interface{}{
		"terms": map[string]interface{}{
			"name": names,
		},
	}
	// Success
	return inst.Find(ctx, query, []string{}, 0, len(names))
}

func (inst *cveDataRepository) Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVE, error) {
	if size == 0 {
		size = 10
	}
	results := make([]*model.CVE, 0)
	_, err := inst.model.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		sorts,
		offset,
		size,
		&results)
	if err != nil {
		return nil, err
	}
	// Success
	return results, nil
}

func (inst *cveDataRepository) FindAll(ctx context.Context, query interface{}, sorts []string) ([]*model.CVE, error) {
	size := 0
	offset := 0
	if value := ctx.Value("size"); value != nil {
		size = value.(int)
	}
	if size == 0 {
		size = 100
	}
	if value := ctx.Value("offset"); value != nil {
		offset = value.(int)
	}
	results := make([]*model.CVE, 0)
	results, err := inst.Find(ctx, query, sorts, offset, size)
	if err != nil || len(results) == 0 {
		return results, err
	}
	// Recursive
	ctx = context.WithValue(ctx, "size", size)
	ctx = context.WithValue(ctx, "offset", offset+size)
	recursiveResults, err := inst.FindAll(ctx, query, sorts)
	if err != nil || len(recursiveResults) == 0 {
		return results, nil
	}
	// Success
	return append(results, recursiveResults...), nil
}

func (inst *cveDataRepository) Count(ctx context.Context, query interface{}) (int64, error) {
	// Success
	return inst.model.Count(inst.Name(), "", query.(map[string]interface{}))
}

func (inst *cveDataRepository) Store(ctx context.Context, document *model.CVE) error {
	if err := inst.model.InsertOne(inst.Name(), "", document); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveDataRepository) UpdateMany(ctx context.Context, updates []elastic.UpdateDocument) error {
	if err := inst.model.UpdateMany(inst.Name(), "", updates); err != nil {
		return err
	}
	// Success
	return nil
}
