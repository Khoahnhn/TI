package elastic

import (
	"context"

	"cve-crawler/model"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
)

type (
	repo interface {
		Name() string
	}

	Repository interface {
		Enduser() EnduserRepository
		Enrichment() EnrichmentRepository
	}

	EnduserRepository interface {
		Asset() AssetRepository
	}

	EnrichmentRepository interface {
		CPE() CPERepository
		CVE() CVERepository
		CVELifecycle() CVELifecycleRepository
		CVERaw() CVERawRepository
		CVELanguage(lang string) CVELangRepository
		CVEHistory() CVEHistoryRepository
		CVEEpssHistory() CVEEpssHistoryRepository
		CVECustomer() CVECustomerRepository
		CWE() CWERepository
	}

	CVELifecycleRepository interface {
		repo
		Store(ctx context.Context, document *model.CVELifecycle) error
		StoreMany(ctx context.Context, document []*model.CVELifecycle) error
		FindBySource(ctx context.Context, id string, source model.CVELifecycleSource) ([]*model.CVELifecycle, error)
	}

	CVECustomerRepository interface {
		repo
		StoreMany(ctx context.Context, document []*model.CveCustomer) error
	}

	AssetRepository interface {
		repo
		GetByID(ctx context.Context, id string) (*model.Asset, error)
		Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.Asset, error)
		FindAll(ctx context.Context, query interface{}, sorts []string) ([]*model.Asset, error)
		AggregationCount(ctx context.Context, query interface{}, fields map[string]int) (map[string][]elastic.ResultAggregationCount, error)
	}

	CPERepository interface {
		repo
		GetByID(ctx context.Context, id string) (*model.CPE, error)
		FindByValue(ctx context.Context, value string) (*model.CPE, error)
	}

	CVERepository interface {
		repo
		GetByID(ctx context.Context, id string) (*model.CVE, error)
		GetByName(ctx context.Context, name string) (*model.CVE, error)
		FindByNames(ctx context.Context, names []string) ([]*model.CVE, error)
		Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVE, error)
		FindAll(ctx context.Context, query interface{}, sorts []string) ([]*model.CVE, error)
		Count(ctx context.Context, query interface{}) (int64, error)
		Store(ctx context.Context, document *model.CVE) error
		UpdateMany(ctx context.Context, updates []elastic.UpdateDocument) error
	}

	CVERawRepository interface {
		repo
		GetByID(ctx context.Context, id string) (*model.CVERaw, error)
		Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVERaw, error)
		FindAll(ctx context.Context, query interface{}, sorts []string) ([]*model.CVERaw, error)
	}

	CVELangRepository interface {
		repo
		SetLang(lang string)
		GetByID(ctx context.Context, id string) (*model.CVELang, error)
	}

	CVEHistoryRepository interface {
		repo
		GetCVEHistoryByCVEIdAndAction(ctx context.Context, cveID string) ([]*model.CVEHistory, error)
	}

	CVEEpssHistoryRepository interface {
		repo
		Store(ctx context.Context, document *model.CveEpssHistory) error
		StoreAll(ctx context.Context, documents []*model.CveEpssHistory) error
	}

	CWERepository interface {
		repo
		GetByCWEId(ctx context.Context, cweId string) (*model.CWE, error)
		Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CWE, error)
		FindByCWEIds(ctx context.Context, names []string) ([]*model.CWE, error)
		StoreAll(ctx context.Context, documents []*model.CWE) error
		UpdateMany(ctx context.Context, updates []elastic.UpdateDocument) error
	}
)
