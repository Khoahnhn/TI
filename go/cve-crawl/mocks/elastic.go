// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/elastic/interface.go
//
// Generated by this command:
//
//	mockgen --destination=./mocks/elastic.go --package=mocks --source=./adapter/elastic/interface.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	elastic "cve-crawler/adapter/elastic"
	model "cve-crawler/model"
	reflect "reflect"

	elastic0 "gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepo is a mock of repo interface.
type Mockrepo struct {
	ctrl     *gomock.Controller
	recorder *MockrepoMockRecorder
	isgomock struct{}
}

// MockrepoMockRecorder is the mock recorder for Mockrepo.
type MockrepoMockRecorder struct {
	mock *Mockrepo
}

// NewMockrepo creates a new mock instance.
func NewMockrepo(ctrl *gomock.Controller) *Mockrepo {
	mock := &Mockrepo{ctrl: ctrl}
	mock.recorder = &MockrepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepo) EXPECT() *MockrepoMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *Mockrepo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockrepoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Mockrepo)(nil).Name))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Enduser mocks base method.
func (m *MockRepository) Enduser() elastic.EnduserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enduser")
	ret0, _ := ret[0].(elastic.EnduserRepository)
	return ret0
}

// Enduser indicates an expected call of Enduser.
func (mr *MockRepositoryMockRecorder) Enduser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enduser", reflect.TypeOf((*MockRepository)(nil).Enduser))
}

// Enrichment mocks base method.
func (m *MockRepository) Enrichment() elastic.EnrichmentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enrichment")
	ret0, _ := ret[0].(elastic.EnrichmentRepository)
	return ret0
}

// Enrichment indicates an expected call of Enrichment.
func (mr *MockRepositoryMockRecorder) Enrichment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enrichment", reflect.TypeOf((*MockRepository)(nil).Enrichment))
}

// MockEnduserRepository is a mock of EnduserRepository interface.
type MockEnduserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnduserRepositoryMockRecorder
	isgomock struct{}
}

// MockEnduserRepositoryMockRecorder is the mock recorder for MockEnduserRepository.
type MockEnduserRepositoryMockRecorder struct {
	mock *MockEnduserRepository
}

// NewMockEnduserRepository creates a new mock instance.
func NewMockEnduserRepository(ctrl *gomock.Controller) *MockEnduserRepository {
	mock := &MockEnduserRepository{ctrl: ctrl}
	mock.recorder = &MockEnduserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnduserRepository) EXPECT() *MockEnduserRepositoryMockRecorder {
	return m.recorder
}

// Asset mocks base method.
func (m *MockEnduserRepository) Asset() elastic.AssetRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Asset")
	ret0, _ := ret[0].(elastic.AssetRepository)
	return ret0
}

// Asset indicates an expected call of Asset.
func (mr *MockEnduserRepositoryMockRecorder) Asset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asset", reflect.TypeOf((*MockEnduserRepository)(nil).Asset))
}

// MockEnrichmentRepository is a mock of EnrichmentRepository interface.
type MockEnrichmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichmentRepositoryMockRecorder
	isgomock struct{}
}

// MockEnrichmentRepositoryMockRecorder is the mock recorder for MockEnrichmentRepository.
type MockEnrichmentRepositoryMockRecorder struct {
	mock *MockEnrichmentRepository
}

// NewMockEnrichmentRepository creates a new mock instance.
func NewMockEnrichmentRepository(ctrl *gomock.Controller) *MockEnrichmentRepository {
	mock := &MockEnrichmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnrichmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichmentRepository) EXPECT() *MockEnrichmentRepositoryMockRecorder {
	return m.recorder
}

// CPE mocks base method.
func (m *MockEnrichmentRepository) CPE() elastic.CPERepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPE")
	ret0, _ := ret[0].(elastic.CPERepository)
	return ret0
}

// CPE indicates an expected call of CPE.
func (mr *MockEnrichmentRepositoryMockRecorder) CPE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPE", reflect.TypeOf((*MockEnrichmentRepository)(nil).CPE))
}

// CVE mocks base method.
func (m *MockEnrichmentRepository) CVE() elastic.CVERepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVE")
	ret0, _ := ret[0].(elastic.CVERepository)
	return ret0
}

// CVE indicates an expected call of CVE.
func (mr *MockEnrichmentRepositoryMockRecorder) CVE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVE", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVE))
}

// CVECustomer mocks base method.
func (m *MockEnrichmentRepository) CVECustomer() elastic.CVECustomerRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVECustomer")
	ret0, _ := ret[0].(elastic.CVECustomerRepository)
	return ret0
}

// CVECustomer indicates an expected call of CVECustomer.
func (mr *MockEnrichmentRepositoryMockRecorder) CVECustomer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVECustomer", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVECustomer))
}

// CVEEpssHistory mocks base method.
func (m *MockEnrichmentRepository) CVEEpssHistory() elastic.CVEEpssHistoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVEEpssHistory")
	ret0, _ := ret[0].(elastic.CVEEpssHistoryRepository)
	return ret0
}

// CVEEpssHistory indicates an expected call of CVEEpssHistory.
func (mr *MockEnrichmentRepositoryMockRecorder) CVEEpssHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVEEpssHistory", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVEEpssHistory))
}

// CVEHistory mocks base method.
func (m *MockEnrichmentRepository) CVEHistory() elastic.CVEHistoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVEHistory")
	ret0, _ := ret[0].(elastic.CVEHistoryRepository)
	return ret0
}

// CVEHistory indicates an expected call of CVEHistory.
func (mr *MockEnrichmentRepositoryMockRecorder) CVEHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVEHistory", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVEHistory))
}

// CVELanguage mocks base method.
func (m *MockEnrichmentRepository) CVELanguage(lang string) elastic.CVELangRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVELanguage", lang)
	ret0, _ := ret[0].(elastic.CVELangRepository)
	return ret0
}

// CVELanguage indicates an expected call of CVELanguage.
func (mr *MockEnrichmentRepositoryMockRecorder) CVELanguage(lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVELanguage", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVELanguage), lang)
}

// CVELifecycle mocks base method.
func (m *MockEnrichmentRepository) CVELifecycle() elastic.CVELifecycleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVELifecycle")
	ret0, _ := ret[0].(elastic.CVELifecycleRepository)
	return ret0
}

// CVELifecycle indicates an expected call of CVELifecycle.
func (mr *MockEnrichmentRepositoryMockRecorder) CVELifecycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVELifecycle", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVELifecycle))
}

// CVERaw mocks base method.
func (m *MockEnrichmentRepository) CVERaw() elastic.CVERawRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVERaw")
	ret0, _ := ret[0].(elastic.CVERawRepository)
	return ret0
}

// CVERaw indicates an expected call of CVERaw.
func (mr *MockEnrichmentRepositoryMockRecorder) CVERaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVERaw", reflect.TypeOf((*MockEnrichmentRepository)(nil).CVERaw))
}

// CWE mocks base method.
func (m *MockEnrichmentRepository) CWE() elastic.CWERepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CWE")
	ret0, _ := ret[0].(elastic.CWERepository)
	return ret0
}

// CWE indicates an expected call of CWE.
func (mr *MockEnrichmentRepositoryMockRecorder) CWE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CWE", reflect.TypeOf((*MockEnrichmentRepository)(nil).CWE))
}

// MockCVELifecycleRepository is a mock of CVELifecycleRepository interface.
type MockCVELifecycleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVELifecycleRepositoryMockRecorder
	isgomock struct{}
}

// MockCVELifecycleRepositoryMockRecorder is the mock recorder for MockCVELifecycleRepository.
type MockCVELifecycleRepositoryMockRecorder struct {
	mock *MockCVELifecycleRepository
}

// NewMockCVELifecycleRepository creates a new mock instance.
func NewMockCVELifecycleRepository(ctrl *gomock.Controller) *MockCVELifecycleRepository {
	mock := &MockCVELifecycleRepository{ctrl: ctrl}
	mock.recorder = &MockCVELifecycleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVELifecycleRepository) EXPECT() *MockCVELifecycleRepositoryMockRecorder {
	return m.recorder
}

// FindBySource mocks base method.
func (m *MockCVELifecycleRepository) FindBySource(ctx context.Context, id string, source model.CVELifecycleSource) ([]*model.CVELifecycle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySource", ctx, id, source)
	ret0, _ := ret[0].([]*model.CVELifecycle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySource indicates an expected call of FindBySource.
func (mr *MockCVELifecycleRepositoryMockRecorder) FindBySource(ctx, id, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySource", reflect.TypeOf((*MockCVELifecycleRepository)(nil).FindBySource), ctx, id, source)
}

// Name mocks base method.
func (m *MockCVELifecycleRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVELifecycleRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVELifecycleRepository)(nil).Name))
}

// Store mocks base method.
func (m *MockCVELifecycleRepository) Store(ctx context.Context, document *model.CVELifecycle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCVELifecycleRepositoryMockRecorder) Store(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCVELifecycleRepository)(nil).Store), ctx, document)
}

// StoreMany mocks base method.
func (m *MockCVELifecycleRepository) StoreMany(ctx context.Context, document []*model.CVELifecycle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMany", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMany indicates an expected call of StoreMany.
func (mr *MockCVELifecycleRepositoryMockRecorder) StoreMany(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMany", reflect.TypeOf((*MockCVELifecycleRepository)(nil).StoreMany), ctx, document)
}

// MockCVECustomerRepository is a mock of CVECustomerRepository interface.
type MockCVECustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVECustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCVECustomerRepositoryMockRecorder is the mock recorder for MockCVECustomerRepository.
type MockCVECustomerRepositoryMockRecorder struct {
	mock *MockCVECustomerRepository
}

// NewMockCVECustomerRepository creates a new mock instance.
func NewMockCVECustomerRepository(ctrl *gomock.Controller) *MockCVECustomerRepository {
	mock := &MockCVECustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCVECustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVECustomerRepository) EXPECT() *MockCVECustomerRepositoryMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockCVECustomerRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVECustomerRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVECustomerRepository)(nil).Name))
}

// StoreMany mocks base method.
func (m *MockCVECustomerRepository) StoreMany(ctx context.Context, document []*model.CveCustomer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMany", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMany indicates an expected call of StoreMany.
func (mr *MockCVECustomerRepositoryMockRecorder) StoreMany(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMany", reflect.TypeOf((*MockCVECustomerRepository)(nil).StoreMany), ctx, document)
}

// MockAssetRepository is a mock of AssetRepository interface.
type MockAssetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepositoryMockRecorder
	isgomock struct{}
}

// MockAssetRepositoryMockRecorder is the mock recorder for MockAssetRepository.
type MockAssetRepositoryMockRecorder struct {
	mock *MockAssetRepository
}

// NewMockAssetRepository creates a new mock instance.
func NewMockAssetRepository(ctrl *gomock.Controller) *MockAssetRepository {
	mock := &MockAssetRepository{ctrl: ctrl}
	mock.recorder = &MockAssetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepository) EXPECT() *MockAssetRepositoryMockRecorder {
	return m.recorder
}

// AggregationCount mocks base method.
func (m *MockAssetRepository) AggregationCount(ctx context.Context, query any, fields map[string]int) (map[string][]elastic0.ResultAggregationCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregationCount", ctx, query, fields)
	ret0, _ := ret[0].(map[string][]elastic0.ResultAggregationCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregationCount indicates an expected call of AggregationCount.
func (mr *MockAssetRepositoryMockRecorder) AggregationCount(ctx, query, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregationCount", reflect.TypeOf((*MockAssetRepository)(nil).AggregationCount), ctx, query, fields)
}

// Find mocks base method.
func (m *MockAssetRepository) Find(ctx context.Context, query any, sorts []string, offset, size int) ([]*model.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAssetRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAssetRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindAll mocks base method.
func (m *MockAssetRepository) FindAll(ctx context.Context, query any, sorts []string) ([]*model.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAssetRepositoryMockRecorder) FindAll(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAssetRepository)(nil).FindAll), ctx, query, sorts)
}

// GetByID mocks base method.
func (m *MockAssetRepository) GetByID(ctx context.Context, id string) (*model.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAssetRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAssetRepository)(nil).GetByID), ctx, id)
}

// Name mocks base method.
func (m *MockAssetRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAssetRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAssetRepository)(nil).Name))
}

// MockCPERepository is a mock of CPERepository interface.
type MockCPERepository struct {
	ctrl     *gomock.Controller
	recorder *MockCPERepositoryMockRecorder
	isgomock struct{}
}

// MockCPERepositoryMockRecorder is the mock recorder for MockCPERepository.
type MockCPERepositoryMockRecorder struct {
	mock *MockCPERepository
}

// NewMockCPERepository creates a new mock instance.
func NewMockCPERepository(ctrl *gomock.Controller) *MockCPERepository {
	mock := &MockCPERepository{ctrl: ctrl}
	mock.recorder = &MockCPERepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCPERepository) EXPECT() *MockCPERepositoryMockRecorder {
	return m.recorder
}

// FindByValue mocks base method.
func (m *MockCPERepository) FindByValue(ctx context.Context, value string) (*model.CPE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByValue", ctx, value)
	ret0, _ := ret[0].(*model.CPE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByValue indicates an expected call of FindByValue.
func (mr *MockCPERepositoryMockRecorder) FindByValue(ctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByValue", reflect.TypeOf((*MockCPERepository)(nil).FindByValue), ctx, value)
}

// GetByID mocks base method.
func (m *MockCPERepository) GetByID(ctx context.Context, id string) (*model.CPE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.CPE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCPERepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCPERepository)(nil).GetByID), ctx, id)
}

// Name mocks base method.
func (m *MockCPERepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCPERepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCPERepository)(nil).Name))
}

// MockCVERepository is a mock of CVERepository interface.
type MockCVERepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVERepositoryMockRecorder
	isgomock struct{}
}

// MockCVERepositoryMockRecorder is the mock recorder for MockCVERepository.
type MockCVERepositoryMockRecorder struct {
	mock *MockCVERepository
}

// NewMockCVERepository creates a new mock instance.
func NewMockCVERepository(ctrl *gomock.Controller) *MockCVERepository {
	mock := &MockCVERepository{ctrl: ctrl}
	mock.recorder = &MockCVERepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVERepository) EXPECT() *MockCVERepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCVERepository) Count(ctx context.Context, query any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCVERepositoryMockRecorder) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCVERepository)(nil).Count), ctx, query)
}

// Find mocks base method.
func (m *MockCVERepository) Find(ctx context.Context, query any, sorts []string, offset, size int) ([]*model.CVE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.CVE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCVERepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCVERepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindAll mocks base method.
func (m *MockCVERepository) FindAll(ctx context.Context, query any, sorts []string) ([]*model.CVE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.CVE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCVERepositoryMockRecorder) FindAll(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCVERepository)(nil).FindAll), ctx, query, sorts)
}

// FindByNames mocks base method.
func (m *MockCVERepository) FindByNames(ctx context.Context, names []string) ([]*model.CVE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNames", ctx, names)
	ret0, _ := ret[0].([]*model.CVE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNames indicates an expected call of FindByNames.
func (mr *MockCVERepositoryMockRecorder) FindByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNames", reflect.TypeOf((*MockCVERepository)(nil).FindByNames), ctx, names)
}

// GetByID mocks base method.
func (m *MockCVERepository) GetByID(ctx context.Context, id string) (*model.CVE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.CVE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCVERepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCVERepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockCVERepository) GetByName(ctx context.Context, name string) (*model.CVE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.CVE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCVERepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCVERepository)(nil).GetByName), ctx, name)
}

// Name mocks base method.
func (m *MockCVERepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVERepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVERepository)(nil).Name))
}

// Store mocks base method.
func (m *MockCVERepository) Store(ctx context.Context, document *model.CVE) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCVERepositoryMockRecorder) Store(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCVERepository)(nil).Store), ctx, document)
}

// UpdateMany mocks base method.
func (m *MockCVERepository) UpdateMany(ctx context.Context, updates []elastic0.UpdateDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockCVERepositoryMockRecorder) UpdateMany(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockCVERepository)(nil).UpdateMany), ctx, updates)
}

// MockCVERawRepository is a mock of CVERawRepository interface.
type MockCVERawRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVERawRepositoryMockRecorder
	isgomock struct{}
}

// MockCVERawRepositoryMockRecorder is the mock recorder for MockCVERawRepository.
type MockCVERawRepositoryMockRecorder struct {
	mock *MockCVERawRepository
}

// NewMockCVERawRepository creates a new mock instance.
func NewMockCVERawRepository(ctrl *gomock.Controller) *MockCVERawRepository {
	mock := &MockCVERawRepository{ctrl: ctrl}
	mock.recorder = &MockCVERawRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVERawRepository) EXPECT() *MockCVERawRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockCVERawRepository) Find(ctx context.Context, query any, sorts []string, offset, size int) ([]*model.CVERaw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.CVERaw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCVERawRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCVERawRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindAll mocks base method.
func (m *MockCVERawRepository) FindAll(ctx context.Context, query any, sorts []string) ([]*model.CVERaw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.CVERaw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCVERawRepositoryMockRecorder) FindAll(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCVERawRepository)(nil).FindAll), ctx, query, sorts)
}

// GetByID mocks base method.
func (m *MockCVERawRepository) GetByID(ctx context.Context, id string) (*model.CVERaw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.CVERaw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCVERawRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCVERawRepository)(nil).GetByID), ctx, id)
}

// Name mocks base method.
func (m *MockCVERawRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVERawRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVERawRepository)(nil).Name))
}

// MockCVELangRepository is a mock of CVELangRepository interface.
type MockCVELangRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVELangRepositoryMockRecorder
	isgomock struct{}
}

// MockCVELangRepositoryMockRecorder is the mock recorder for MockCVELangRepository.
type MockCVELangRepositoryMockRecorder struct {
	mock *MockCVELangRepository
}

// NewMockCVELangRepository creates a new mock instance.
func NewMockCVELangRepository(ctrl *gomock.Controller) *MockCVELangRepository {
	mock := &MockCVELangRepository{ctrl: ctrl}
	mock.recorder = &MockCVELangRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVELangRepository) EXPECT() *MockCVELangRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCVELangRepository) GetByID(ctx context.Context, id string) (*model.CVELang, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.CVELang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCVELangRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCVELangRepository)(nil).GetByID), ctx, id)
}

// Name mocks base method.
func (m *MockCVELangRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVELangRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVELangRepository)(nil).Name))
}

// SetLang mocks base method.
func (m *MockCVELangRepository) SetLang(lang string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLang", lang)
}

// SetLang indicates an expected call of SetLang.
func (mr *MockCVELangRepositoryMockRecorder) SetLang(lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLang", reflect.TypeOf((*MockCVELangRepository)(nil).SetLang), lang)
}

// MockCVEHistoryRepository is a mock of CVEHistoryRepository interface.
type MockCVEHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVEHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCVEHistoryRepositoryMockRecorder is the mock recorder for MockCVEHistoryRepository.
type MockCVEHistoryRepositoryMockRecorder struct {
	mock *MockCVEHistoryRepository
}

// NewMockCVEHistoryRepository creates a new mock instance.
func NewMockCVEHistoryRepository(ctrl *gomock.Controller) *MockCVEHistoryRepository {
	mock := &MockCVEHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockCVEHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVEHistoryRepository) EXPECT() *MockCVEHistoryRepositoryMockRecorder {
	return m.recorder
}

// GetCVEHistoryByCVEIdAndAction mocks base method.
func (m *MockCVEHistoryRepository) GetCVEHistoryByCVEIdAndAction(ctx context.Context, cveID string) ([]*model.CVEHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVEHistoryByCVEIdAndAction", ctx, cveID)
	ret0, _ := ret[0].([]*model.CVEHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCVEHistoryByCVEIdAndAction indicates an expected call of GetCVEHistoryByCVEIdAndAction.
func (mr *MockCVEHistoryRepositoryMockRecorder) GetCVEHistoryByCVEIdAndAction(ctx, cveID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVEHistoryByCVEIdAndAction", reflect.TypeOf((*MockCVEHistoryRepository)(nil).GetCVEHistoryByCVEIdAndAction), ctx, cveID)
}

// Name mocks base method.
func (m *MockCVEHistoryRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVEHistoryRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVEHistoryRepository)(nil).Name))
}

// MockCVEEpssHistoryRepository is a mock of CVEEpssHistoryRepository interface.
type MockCVEEpssHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCVEEpssHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCVEEpssHistoryRepositoryMockRecorder is the mock recorder for MockCVEEpssHistoryRepository.
type MockCVEEpssHistoryRepositoryMockRecorder struct {
	mock *MockCVEEpssHistoryRepository
}

// NewMockCVEEpssHistoryRepository creates a new mock instance.
func NewMockCVEEpssHistoryRepository(ctrl *gomock.Controller) *MockCVEEpssHistoryRepository {
	mock := &MockCVEEpssHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockCVEEpssHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCVEEpssHistoryRepository) EXPECT() *MockCVEEpssHistoryRepositoryMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockCVEEpssHistoryRepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCVEEpssHistoryRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCVEEpssHistoryRepository)(nil).Name))
}

// Store mocks base method.
func (m *MockCVEEpssHistoryRepository) Store(ctx context.Context, document *model.CveEpssHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCVEEpssHistoryRepositoryMockRecorder) Store(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCVEEpssHistoryRepository)(nil).Store), ctx, document)
}

// StoreAll mocks base method.
func (m *MockCVEEpssHistoryRepository) StoreAll(ctx context.Context, documents []*model.CveEpssHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAll", ctx, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAll indicates an expected call of StoreAll.
func (mr *MockCVEEpssHistoryRepositoryMockRecorder) StoreAll(ctx, documents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAll", reflect.TypeOf((*MockCVEEpssHistoryRepository)(nil).StoreAll), ctx, documents)
}

// MockCWERepository is a mock of CWERepository interface.
type MockCWERepository struct {
	ctrl     *gomock.Controller
	recorder *MockCWERepositoryMockRecorder
	isgomock struct{}
}

// MockCWERepositoryMockRecorder is the mock recorder for MockCWERepository.
type MockCWERepositoryMockRecorder struct {
	mock *MockCWERepository
}

// NewMockCWERepository creates a new mock instance.
func NewMockCWERepository(ctrl *gomock.Controller) *MockCWERepository {
	mock := &MockCWERepository{ctrl: ctrl}
	mock.recorder = &MockCWERepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCWERepository) EXPECT() *MockCWERepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockCWERepository) Find(ctx context.Context, query any, sorts []string, offset, size int) ([]*model.CWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.CWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCWERepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCWERepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindByCWEIds mocks base method.
func (m *MockCWERepository) FindByCWEIds(ctx context.Context, names []string) ([]*model.CWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCWEIds", ctx, names)
	ret0, _ := ret[0].([]*model.CWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCWEIds indicates an expected call of FindByCWEIds.
func (mr *MockCWERepositoryMockRecorder) FindByCWEIds(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCWEIds", reflect.TypeOf((*MockCWERepository)(nil).FindByCWEIds), ctx, names)
}

// GetByCWEId mocks base method.
func (m *MockCWERepository) GetByCWEId(ctx context.Context, cweId string) (*model.CWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCWEId", ctx, cweId)
	ret0, _ := ret[0].(*model.CWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCWEId indicates an expected call of GetByCWEId.
func (mr *MockCWERepositoryMockRecorder) GetByCWEId(ctx, cweId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCWEId", reflect.TypeOf((*MockCWERepository)(nil).GetByCWEId), ctx, cweId)
}

// Name mocks base method.
func (m *MockCWERepository) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCWERepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCWERepository)(nil).Name))
}

// StoreAll mocks base method.
func (m *MockCWERepository) StoreAll(ctx context.Context, documents []*model.CWE) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAll", ctx, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAll indicates an expected call of StoreAll.
func (mr *MockCWERepositoryMockRecorder) StoreAll(ctx, documents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAll", reflect.TypeOf((*MockCWERepository)(nil).StoreAll), ctx, documents)
}

// UpdateMany mocks base method.
func (m *MockCWERepository) UpdateMany(ctx context.Context, updates []elastic0.UpdateDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockCWERepositoryMockRecorder) UpdateMany(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockCWERepository)(nil).UpdateMany), ctx, updates)
}
