// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.viettelcyber.com/awesome-threat/library/adapter/kafka (interfaces: Producer)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mock_kafka_producer.go --package=mocks gitlab.viettelcyber.com/awesome-threat/library/adapter/kafka Producer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Produce mocks base method.
func (m *MockProducer) Produce(topic string, key, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", topic, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(topic, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), topic, key, value)
}

// ProduceObject mocks base method.
func (m *MockProducer) ProduceObject(topic string, key, value any, compact bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceObject", topic, key, value, compact)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceObject indicates an expected call of ProduceObject.
func (mr *MockProducerMockRecorder) ProduceObject(topic, key, value, compact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceObject", reflect.TypeOf((*MockProducer)(nil).ProduceObject), topic, key, value, compact)
}
