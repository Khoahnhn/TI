// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.viettelcyber.com/awesome-threat/library/adapter/redis (interfaces: Strings)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mock_redis/mock_redis_string.go --package=mocksRedis gitlab.viettelcyber.com/awesome-threat/library/adapter/redis Strings
//

// Package mocksRedis is a generated GoMock package.
package mocksRedis

import (
	reflect "reflect"

	clock "gitlab.viettelcyber.com/awesome-threat/library/clock"
	gomock "go.uber.org/mock/gomock"
)

// MockStrings is a mock of Strings interface.
type MockStrings struct {
	ctrl     *gomock.Controller
	recorder *MockStringsMockRecorder
	isgomock struct{}
}

// MockStringsMockRecorder is the mock recorder for MockStrings.
type MockStringsMockRecorder struct {
	mock *MockStrings
}

// NewMockStrings creates a new mock instance.
func NewMockStrings(ctrl *gomock.Controller) *MockStrings {
	mock := &MockStrings{ctrl: ctrl}
	mock.recorder = &MockStringsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrings) EXPECT() *MockStringsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStrings) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStringsMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStrings)(nil).Get), key)
}

// GetO mocks base method.
func (m *MockStrings) GetO(key string, pointer any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetO", key, pointer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetO indicates an expected call of GetO.
func (mr *MockStringsMockRecorder) GetO(key, pointer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetO", reflect.TypeOf((*MockStrings)(nil).GetO), key, pointer)
}

// Set mocks base method.
func (m *MockStrings) Set(key, value string, ttl clock.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStringsMockRecorder) Set(key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStrings)(nil).Set), key, value, ttl)
}

// SetO mocks base method.
func (m *MockStrings) SetO(key string, value any, ttl clock.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetO", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetO indicates an expected call of SetO.
func (mr *MockStringsMockRecorder) SetO(key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetO", reflect.TypeOf((*MockStrings)(nil).SetO), key, value, ttl)
}
