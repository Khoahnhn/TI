// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.viettelcyber.com/awesome-threat/library/adapter/redis (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mock_redis/mock_redis.go --package=mocksRedis gitlab.viettelcyber.com/awesome-threat/library/adapter/redis Service
//

// Package mocksRedis is a generated GoMock package.
package mocksRedis

import (
	reflect "reflect"

	redis "gitlab.viettelcyber.com/awesome-threat/library/adapter/redis"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Connection mocks base method.
func (m *MockService) Connection() redis.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(redis.Connection)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockServiceMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockService)(nil).Connection))
}

// Keys mocks base method.
func (m *MockService) Keys() redis.Keys {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(redis.Keys)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockServiceMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockService)(nil).Keys))
}

// Lists mocks base method.
func (m *MockService) Lists() redis.Lists {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lists")
	ret0, _ := ret[0].(redis.Lists)
	return ret0
}

// Lists indicates an expected call of Lists.
func (mr *MockServiceMockRecorder) Lists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lists", reflect.TypeOf((*MockService)(nil).Lists))
}

// Strings mocks base method.
func (m *MockService) Strings() redis.Strings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Strings")
	ret0, _ := ret[0].(redis.Strings)
	return ret0
}

// Strings indicates an expected call of Strings.
func (mr *MockServiceMockRecorder) Strings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strings", reflect.TypeOf((*MockService)(nil).Strings))
}
