// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.viettelcyber.com/awesome-threat/library/adapter/rabbit (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mock_rabbitmq.go --package=mocks gitlab.viettelcyber.com/awesome-threat/library/adapter/rabbit Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	rabbit "gitlab.viettelcyber.com/awesome-threat/library/adapter/rabbit"
	clock "gitlab.viettelcyber.com/awesome-threat/library/clock"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BindQueue mocks base method.
func (m *MockService) BindQueue(queue, exchange string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQueue", queue, exchange)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQueue indicates an expected call of BindQueue.
func (mr *MockServiceMockRecorder) BindQueue(queue, exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQueue", reflect.TypeOf((*MockService)(nil).BindQueue), queue, exchange)
}

// Consume mocks base method.
func (m *MockService) Consume(queue string, auto bool, prefetchCount int, callback rabbit.Consumer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, auto, prefetchCount, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockServiceMockRecorder) Consume(queue, auto, prefetchCount, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockService)(nil).Consume), queue, auto, prefetchCount, callback)
}

// DeclareExchange mocks base method.
func (m *MockService) DeclareExchange(name, kind string, durable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareExchange", name, kind, durable)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareExchange indicates an expected call of DeclareExchange.
func (mr *MockServiceMockRecorder) DeclareExchange(name, kind, durable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareExchange", reflect.TypeOf((*MockService)(nil).DeclareExchange), name, kind, durable)
}

// DeclareQueue mocks base method.
func (m *MockService) DeclareQueue(name string, durable bool, priority int, ttl clock.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", name, durable, priority, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue.
func (mr *MockServiceMockRecorder) DeclareQueue(name, durable, priority, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockService)(nil).DeclareQueue), name, durable, priority, ttl)
}

// Publish mocks base method.
func (m *MockService) Publish(exchange, queue string, message rabbit.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, queue, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockServiceMockRecorder) Publish(exchange, queue, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockService)(nil).Publish), exchange, queue, message)
}
