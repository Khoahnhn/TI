package main

import (
	"context"
	"flag"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"gopkg.in/yaml.v2"

	"cve-crawler/defs"
	"cve-crawler/model"
	"cve-crawler/processor"
	"cve-crawler/task"
)

func main() {
	var (
		start      string
		modules    string
		configFile string
	)
	flag.StringVar(&start, "s", "", "Processor: ['processor', 'task']")
	flag.StringVar(&start, "start", "", "Processor: ['processor', 'task]")
	flag.StringVar(&modules, "m", "", "Processor: ['crawler', 'parser', 'analyzer', 'mapping', 'recheck', 'crawler-api', 'lifecycle', 'cve-espp-job', 'cwe-job]")
	flag.StringVar(&modules, "module", "", "Processor: ['crawler', 'parser', 'analyzer', 'mapping', 'recheck', 'crawler-api', 'lifecycle', 'cve-epss-job', 'cwe-job]']")
	flag.StringVar(&configFile, "c", "", "Config file name")
	flag.StringVar(&configFile, "config", "", "Config file name")
	flag.Parse()
	if len(configFile) == 0 {
		configFile = os.Getenv(defs.EnvConfigFilePath)
		if configFile == "" {
			configFile = defs.DefaultConfigFilePath
		}
	}
	// Read config file
	var config model.WorkerConfig
	f, err := os.Open(configFile)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	decoder := yaml.NewDecoder(f)
	err = decoder.Decode(&config)
	if err != nil {
		panic(err)
	}
	// Start
	globalContext, _ := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM, syscall.SIGKILL)
	switch start {
	case "processor":
		if strings.Contains(modules, ",") {
			processors := strings.Split(modules, ",")
			for _, p := range processors {
				go func() {
					ps := processor.NewProcessor(globalContext, p, config)
					ps.Start()
				}()
			}
		} else {
			go func() {
				ps := processor.NewProcessor(globalContext, modules, config)
				ps.Start()
			}()
		}
	case "task":
		if strings.Contains(modules, ",") {
			tasks := strings.Split(modules, ",")
			for _, p := range tasks {
				go func() {
					ps := task.NewTask(p, config)
					ps.Start()
				}()
			}
		} else {
			go func() {
				ps := task.NewTask(modules, config)
				ps.Start()
			}()
		}
	default:
		panic("parameter <start> not found")
	}
	// Block
	select {}
}
