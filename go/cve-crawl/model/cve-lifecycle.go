package model

import (
	"cve-crawler/defs"
	"fmt"

	"gitlab.viettelcyber.com/awesome-threat/library/hash"
)

type CVELifecycleEvent string
type CVELifecycleSource string

const (
	CVE_SOURCE_NVD CVELifecycleSource = "nvd"
	CVE_SOURCE_VTI CVELifecycleSource = "vti"
)

const (
	CVE_EVENT_APPROVE_CVE         CVELifecycleEvent = "approve_cve"
	CVE_EVENT_ANALYSIS_TIME       CVELifecycleEvent = "analysis_time"
	CVE_EVENT_INDEPTH_ANALYSIS    CVELifecycleEvent = "indepth_analysis"
	CVE_EVENT_CREATE_CVE          CVELifecycleEvent = "create_cve"
	CVE_EVENT_CVE_CISA_KEY_UPDATE CVELifecycleEvent = "cve_cisa_key_update"
	CVE_EVENT_CVE_RECEIVED        CVELifecycleEvent = "cve_received"
	// v2 events
	CVE_LIFECYCLE_EXPLOIT    CVELifecycleEvent = "exploit"
	CVE_LIFECYCLE_CVE        CVELifecycleEvent = "cve"
	CVE_LIFECYCLE_DETECTION  CVELifecycleEvent = "detection"
	CVE_LIFECYCLE_MEDIA      CVELifecycleEvent = "media"
	CVE_LIFECYCLE_MITIGATION CVELifecycleEvent = "mitigation"
	CVE_LIFECYCLE_OST        CVELifecycleEvent = "ost"
)

var CVE_EVENT_MAPPING = map[string]CVELifecycleEvent{
	defs.CVE_EVENT_RECEIVED:        CVE_EVENT_CVE_RECEIVED,
	defs.CVE_EVENT_CISA_KEY_UPDATE: CVE_EVENT_CVE_CISA_KEY_UPDATE,
}

type (
	CVELifecycle struct {
		ID         string            `json:"id"`
		CVEId      string            `json:"cve_id"`
		CVECode    string            `json:"cve_code"`
		Created    int64             `json:"created"`
		Event      CVELifecycleEvent `json:"event"`
		References []string          `json:"references"`
		// Link             string             `json:"link"`
		// Creator          string `json:"creator"`
		// SourceIdentifier string `json:"source_identifier"`
		// Title            string `json:"title"`
		// Modified         int64  `json:"modified"`
	}

	CVELifecycleLogstash struct {
		CVELifecycle
		Metadata Metadata `json:"@metadata"`
	}

	LifecycleOstKafkaInput struct {
		CveName     string   `json:"cveName"`
		PublishDate int64    `json:"publishDate"`
		Urls        []string `json:"urls"`
	}
)

func (doc *CVELifecycle) GetID() string {
	// Success
	return doc.ID
}

func (doc *CVELifecycle) SetEID(id string) {
	// Success
	doc.ID = id
}

func (doc *CVELifecycle) GenerateId() {
	id := hash.SHA1(fmt.Sprintf("%v.%v", doc.CVECode, doc.Event))
	doc.ID = id
}
