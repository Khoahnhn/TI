package model

import (
	"strings"

	"gitlab.viettelcyber.com/awesome-threat/library/clock"
	"gitlab.viettelcyber.com/awesome-threat/library/hash"

	"cve-crawler/defs"
)

type (
	CPE struct {
		CPEDetail
		Name      string   `json:"name"`
		Edition   string   `json:"edition"`
		Language  string   `json:"language"`
		SwEdition string   `json:"sw_edition"`
		TargetSw  string   `json:"target_sw"`
		TargetHw  string   `json:"target_hw"`
		Other     string   `json:"other"`
		Reference []string `json:"references"`
	}

	CPEDetail struct {
		EID     string `json:"-"`
		ID      string `json:"id"`
		Created int64  `json:"created"`
		Value   string `json:"value"`
		Part    string `json:"part"`
		Vendor  string `json:"vendor"`
		Product string `json:"product"`
		Version string `json:"version"`
		Update  string `json:"update"`
	}

	CPEDetails []*CPEDetail

	CPEMeta struct {
		CPE
		Metadata Metadata `json:"@metadata"`
	}
)

func (doc *CPE) SetEID(id string) {
	// Success
	doc.EID = id
}

func NewCPE(cpe string) *CPEMeta {
	now, _ := clock.Now(clock.UTC)
	data := strings.Split(cpe, ":")
	if len(data) < 13 {
		return nil
	}
	titleSplit := make([]string, 0)
	for i := 3; i < len(data); i++ {
		if data[i] != "*" {
			titleSplit = append(titleSplit, data[i])
		}
	}
	cpeID := hash.SHA1(cpe)
	document := CPEMeta{
		CPE: CPE{
			CPEDetail: CPEDetail{
				ID:      cpeID,
				Created: clock.UnixMilli(now),
				Value:   cpe,
				Part:    data[2],
				Vendor:  data[3],
				Product: data[4],
				Version: data[5],
				Update:  data[6],
			},
			Name:      strings.Join(titleSplit, " "),
			Edition:   data[7],
			Language:  data[8],
			SwEdition: data[9],
			TargetSw:  data[10],
			TargetHw:  data[11],
			Other:     data[12],
			Reference: make([]string, 0),
		},
		Metadata: Metadata{
			Index: defs.IndexCPE,
			Type:  defs.TypeCpe,
			ID:    cpeID,
		},
	}
	// Success
	return &document
}

func (doc *CPEDetail) GetID() string {
	// Success
	return doc.ID
}

func (doc CPEDetails) Len() int {
	// Success
	return len(doc)
}

func (doc CPEDetails) Less(i, j int) bool {
	// Success
	return doc[i].Value < doc[j].Value
}

func (doc CPEDetails) Swap(i, j int) {
	// Success
	doc[i], doc[j] = doc[j], doc[i]
}
