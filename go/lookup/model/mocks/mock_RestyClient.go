// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	resty "github.com/go-resty/resty/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockRestyClient is an autogenerated mock type for the Client type
type MockRestyClient struct {
	mock.Mock
}

// GetDomainPassiveDNS provides a mock function with given fields: enrichmentAPI, domain, limit, offset, result
func (_m *MockRestyClient) GetDomainPassiveDNS(enrichmentAPI string, domain string, limit int, offset int, result interface{}) (*resty.Response, error) {
	ret := _m.Called(enrichmentAPI, domain, limit, offset, result)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainPassiveDNS")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) (*resty.Response, error)); ok {
		return rf(enrichmentAPI, domain, limit, offset, result)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) *resty.Response); ok {
		r0 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, interface{}) error); ok {
		r1 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPAddressPassiveDNS provides a mock function with given fields: enrichmentAPI, ipAddress, limit, offset, result
func (_m *MockRestyClient) GetIPAddressPassiveDNS(enrichmentAPI string, ipAddress string, limit int, offset int, result interface{}) (*resty.Response, error) {
	ret := _m.Called(enrichmentAPI, ipAddress, limit, offset, result)

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddressPassiveDNS")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) (*resty.Response, error)); ok {
		return rf(enrichmentAPI, ipAddress, limit, offset, result)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) *resty.Response); ok {
		r0 = rf(enrichmentAPI, ipAddress, limit, offset, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, interface{}) error); ok {
		r1 = rf(enrichmentAPI, ipAddress, limit, offset, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiblingDomains provides a mock function with given fields: enrichmentAPI, domain, limit, offset, result
func (_m *MockRestyClient) GetSiblingDomains(enrichmentAPI string, domain string, limit int, offset int, result interface{}) (*resty.Response, error) {
	ret := _m.Called(enrichmentAPI, domain, limit, offset, result)

	if len(ret) == 0 {
		panic("no return value specified for GetSiblingDomains")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) (*resty.Response, error)); ok {
		return rf(enrichmentAPI, domain, limit, offset, result)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) *resty.Response); ok {
		r0 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, interface{}) error); ok {
		r1 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubdomains provides a mock function with given fields: enrichmentAPI, domain, limit, offset, result
func (_m *MockRestyClient) GetSubdomains(enrichmentAPI string, domain string, limit int, offset int, result interface{}) (*resty.Response, error) {
	ret := _m.Called(enrichmentAPI, domain, limit, offset, result)

	if len(ret) == 0 {
		panic("no return value specified for GetSubdomains")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) (*resty.Response, error)); ok {
		return rf(enrichmentAPI, domain, limit, offset, result)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) *resty.Response); ok {
		r0 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, interface{}) error); ok {
		r1 = rf(enrichmentAPI, domain, limit, offset, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubnet provides a mock function with given fields: enrichmentAPI, ipAddress, limit, offset, result
func (_m *MockRestyClient) GetSubnet(enrichmentAPI string, ipAddress string, limit int, offset int, result interface{}) (*resty.Response, error) {
	ret := _m.Called(enrichmentAPI, ipAddress, limit, offset, result)

	if len(ret) == 0 {
		panic("no return value specified for GetSubnet")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) (*resty.Response, error)); ok {
		return rf(enrichmentAPI, ipAddress, limit, offset, result)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, interface{}) *resty.Response); ok {
		r0 = rf(enrichmentAPI, ipAddress, limit, offset, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, interface{}) error); ok {
		r1 = rf(enrichmentAPI, ipAddress, limit, offset, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRestyClient creates a new instance of MockRestyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRestyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRestyClient {
	mock := &MockRestyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
