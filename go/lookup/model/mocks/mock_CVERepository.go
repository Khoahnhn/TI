// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "ws-lookup/model"
)

// MockCVERepository is an autogenerated mock type for the CVERepository type
type MockCVERepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, index, query, sorts, offset, size
func (_m *MockCVERepository) Find(ctx context.Context, index string, query interface{}, sorts []string, offset int, size int) ([]*model.CVE, error) {
	ret := _m.Called(ctx, index, query, sorts, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*model.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string, int, int) ([]*model.CVE, error)); ok {
		return rf(ctx, index, query, sorts, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string, int, int) []*model.CVE); ok {
		r0 = rf(ctx, index, query, sorts, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CVE)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, []string, int, int) error); ok {
		r1 = rf(ctx, index, query, sorts, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, query, sorts
func (_m *MockCVERepository) FindAll(ctx context.Context, query interface{}, sorts []string) ([]*model.CVE, error) {
	ret := _m.Called(ctx, query, sorts)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*model.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, []string) ([]*model.CVE, error)); ok {
		return rf(ctx, query, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, []string) []*model.CVE); ok {
		r0 = rf(ctx, query, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CVE)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, []string) error); ok {
		r1 = rf(ctx, query, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByValues provides a mock function with given fields: values
func (_m *MockCVERepository) FindByValues(values []string) ([]*model.CVE, error) {
	ret := _m.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for FindByValues")
	}

	var r0 []*model.CVE
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*model.CVE, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func([]string) []*model.CVE); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CVE)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *MockCVERepository) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockCVERepository creates a new instance of MockCVERepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCVERepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCVERepository {
	mock := &MockCVERepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
