// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	udm "gitlab.viettelcyber.com/awesome-threat/library/udm"
)

// MockUDMRepository is an autogenerated mock type for the Repository type
type MockUDMRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: kind, query
func (_m *MockUDMRepository) Count(kind udm.EntityType, query interface{}) (int64, error) {
	ret := _m.Called(kind, query)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(udm.EntityType, interface{}) (int64, error)); ok {
		return rf(kind, query)
	}
	if rf, ok := ret.Get(0).(func(udm.EntityType, interface{}) int64); ok {
		r0 = rf(kind, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(udm.EntityType, interface{}) error); ok {
		r1 = rf(kind, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountRelationships provides a mock function with given fields: id, kind, relationshipType
func (_m *MockUDMRepository) CountRelationships(id string, kind udm.EntityType, relationshipType udm.RelationshipType) (int64, error) {
	ret := _m.Called(id, kind, relationshipType)

	if len(ret) == 0 {
		panic("no return value specified for CountRelationships")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) (int64, error)); ok {
		return rf(id, kind, relationshipType)
	}
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) int64); ok {
		r0 = rf(id, kind, relationshipType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, udm.EntityType, udm.RelationshipType) error); ok {
		r1 = rf(id, kind, relationshipType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountSourceRelationships provides a mock function with given fields: id, kind, relationshipType
func (_m *MockUDMRepository) CountSourceRelationships(id string, kind udm.EntityType, relationshipType udm.RelationshipType) (int64, error) {
	ret := _m.Called(id, kind, relationshipType)

	if len(ret) == 0 {
		panic("no return value specified for CountSourceRelationships")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) (int64, error)); ok {
		return rf(id, kind, relationshipType)
	}
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) int64); ok {
		r0 = rf(id, kind, relationshipType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, udm.EntityType, udm.RelationshipType) error); ok {
		r1 = rf(id, kind, relationshipType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTargetRelationships provides a mock function with given fields: id, kind, relationshipType
func (_m *MockUDMRepository) CountTargetRelationships(id string, kind udm.EntityType, relationshipType udm.RelationshipType) (int64, error) {
	ret := _m.Called(id, kind, relationshipType)

	if len(ret) == 0 {
		panic("no return value specified for CountTargetRelationships")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) (int64, error)); ok {
		return rf(id, kind, relationshipType)
	}
	if rf, ok := ret.Get(0).(func(string, udm.EntityType, udm.RelationshipType) int64); ok {
		r0 = rf(id, kind, relationshipType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, udm.EntityType, udm.RelationshipType) error); ok {
		r1 = rf(id, kind, relationshipType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, index, query, sorts, offset, size
func (_m *MockUDMRepository) Find(ctx context.Context, index string, query interface{}, sorts []string, offset int, size int) ([]*udm.Entity, error) {
	ret := _m.Called(ctx, index, query, sorts, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string, int, int) ([]*udm.Entity, error)); ok {
		return rf(ctx, index, query, sorts, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string, int, int) []*udm.Entity); ok {
		r0 = rf(ctx, index, query, sorts, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, []string, int, int) error); ok {
		r1 = rf(ctx, index, query, sorts, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, index, query, sorts
func (_m *MockUDMRepository) FindAll(ctx context.Context, index string, query interface{}, sorts []string) ([]*udm.Entity, error) {
	ret := _m.Called(ctx, index, query, sorts)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string) ([]*udm.Entity, error)); ok {
		return rf(ctx, index, query, sorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []string) []*udm.Entity); ok {
		r0 = rf(ctx, index, query, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, []string) error); ok {
		r1 = rf(ctx, index, query, sorts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id, kind
func (_m *MockUDMRepository) Get(ctx context.Context, id string, kind udm.EntityType) (*udm.Entity, error) {
	ret := _m.Called(ctx, id, kind)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType) (*udm.Entity, error)); ok {
		return rf(ctx, id, kind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType) *udm.Entity); ok {
		r0 = rf(ctx, id, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, udm.EntityType) error); ok {
		r1 = rf(ctx, id, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationships provides a mock function with given fields: ctx, id, kind, relationshipType, sorts, offset, size
func (_m *MockUDMRepository) GetRelationships(ctx context.Context, id string, kind udm.EntityType, relationshipType udm.RelationshipType, sorts []string, offset int, size int) ([]*udm.Entity, error) {
	ret := _m.Called(ctx, id, kind, relationshipType, sorts, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationships")
	}

	var r0 []*udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) ([]*udm.Entity, error)); ok {
		return rf(ctx, id, kind, relationshipType, sorts, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) []*udm.Entity); ok {
		r0 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) error); ok {
		r1 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceRelationships provides a mock function with given fields: ctx, id, kind, relationshipType, sorts, offset, size
func (_m *MockUDMRepository) GetSourceRelationships(ctx context.Context, id string, kind udm.EntityType, relationshipType udm.RelationshipType, sorts []string, offset int, size int) ([]*udm.Entity, error) {
	ret := _m.Called(ctx, id, kind, relationshipType, sorts, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceRelationships")
	}

	var r0 []*udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) ([]*udm.Entity, error)); ok {
		return rf(ctx, id, kind, relationshipType, sorts, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) []*udm.Entity); ok {
		r0 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) error); ok {
		r1 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTargetRelationships provides a mock function with given fields: ctx, id, kind, relationshipType, sorts, offset, size
func (_m *MockUDMRepository) GetTargetRelationships(ctx context.Context, id string, kind udm.EntityType, relationshipType udm.RelationshipType, sorts []string, offset int, size int) ([]*udm.Entity, error) {
	ret := _m.Called(ctx, id, kind, relationshipType, sorts, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for GetTargetRelationships")
	}

	var r0 []*udm.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) ([]*udm.Entity, error)); ok {
		return rf(ctx, id, kind, relationshipType, sorts, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) []*udm.Entity); ok {
		r0 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udm.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, udm.EntityType, udm.RelationshipType, []string, int, int) error); ok {
		r1 = rf(ctx, id, kind, relationshipType, sorts, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, document, kind
func (_m *MockUDMRepository) InsertOne(ctx context.Context, document *udm.Entity, kind udm.EntityType) error {
	ret := _m.Called(ctx, document, kind)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *udm.Entity, udm.EntityType) error); ok {
		r0 = rf(ctx, document, kind)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockUDMRepository) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockUDMRepository creates a new instance of MockUDMRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUDMRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUDMRepository {
	mock := &MockUDMRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
