package elastic

import (
	"context"
	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
	es "gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"

	"gitlab.viettelcyber.com/ti-micro/ws-threat/defs"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/model"
)

type lifecycleV2Repository struct {
	con elastic.Service
}

func NewCVELifeCycleV2Repository(conf elastic.Config) CVELifeCycleV2Repository {
	// Success
	return &lifecycleV2Repository{con: elastic.NewService(conf)}
}

func (inst *lifecycleV2Repository) Name() string {
	// Success
	return defs.IndexCveLifeCycleV2
}

func (inst *lifecycleV2Repository) Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVELifeCycleV2, int64, error) {
	if size == 0 {
		size = 10
	}
	results := make([]*model.CVELifeCycleV2, 0)
	total, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		sorts,
		offset,
		size,
		&results)
	if err != nil {
		return nil, 0, err
	}
	// Success
	return results, total, nil
}

func (inst *lifecycleV2Repository) Count(ctx context.Context, query interface{}) (int64, error) {
	// Success
	return inst.con.Count(inst.Name(), "", query.(map[string]interface{}))
}

func (inst *lifecycleV2Repository) Store(ctx context.Context, document *model.CVELifeCycleV2) error {
	if err := inst.con.InsertOne(inst.Name(), "", document); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *lifecycleV2Repository) StoreBulk(ctx context.Context, documents []*model.CVELifeCycleV2) error {
	if len(documents) == 0 {
		return nil
	}
	docs := make([]elastic.Document, 0)
	for _, document := range documents {
		docs = append(docs, document)
	}
	if err := inst.con.InsertMany(inst.Name(), "", docs); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *lifecycleV2Repository) FindBulk(ctx context.Context, cveCodes []string) ([]*model.CVELifeCycleV2, error) {
	query := map[string]interface{}{
		"terms": map[string]interface{}{
			"cve_code": cveCodes,
		},
	}

	var results []*model.CVELifeCycleV2

	_, err := inst.con.FindOffset(inst.Name(), "", query, nil, 0, 1000, &results)
	if err != nil && err.Error() != es.NotFoundError {
		return nil, err
	}

	return results, nil
}

func (inst *lifecycleV2Repository) Update(ctx context.Context, document *model.CVELifeCycleV2) error {
	if err := inst.con.UpdateByID(inst.Name(), "", document.GetID(), document, false); err != nil {
		return err
	}
	// Success
	return nil
}
