package elastic

import (
	"context"
	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/defs"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/model"
)

type cveEpssHistoryRepository struct {
	con elastic.Service
}

func NewCVEEPSSHistoryRepository(conf elastic.Config) CVEEPSSHistoryRepository {
	return &cveEpssHistoryRepository{con: elastic.NewService(conf)}
}

func (inst *cveEpssHistoryRepository) Name() string {
	return defs.IndexCveEpssHistory
}

func (inst *cveEpssHistoryRepository) Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVEEPSSHistory, int64, error) {
	if size == 0 {
		size = 10
	}
	result := make([]*model.CVEEPSSHistory, 0)
	total, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		sorts,
		offset,
		size,
		&result)
	if err != nil {
		return nil, 0, err
	}
	return result, total, nil
}

func (inst *cveEpssHistoryRepository) FindByCVEName(ctx context.Context, cveName string, sorts []string, offset, size int) ([]*model.CVEEPSSHistory, int64, error) {
	query := map[string]interface{}{
		"bool": map[string]interface{}{
			"filter": []interface{}{
				map[string]interface{}{
					"term": map[string]interface{}{
						"cve_name": cveName,
					},
				},
			},
		},
	}
	return inst.Find(ctx, query, sorts, offset, size)
}

func (inst *cveEpssHistoryRepository) Count(ctx context.Context, query interface{}) (int64, error) {
	return inst.con.Count(inst.Name(), "", query.(map[string]interface{}))
}

func (inst *cveEpssHistoryRepository) Store(ctx context.Context, document *model.CVEEPSSHistory) error {
	if err := inst.con.InsertOne(inst.Name(), "", document); err != nil {
		return err
	}
	return nil
}
