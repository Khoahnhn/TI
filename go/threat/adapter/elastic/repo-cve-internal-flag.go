package elastic

import (
	"context"
	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/defs"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/model"
)

type cveInternalFlagRepository struct {
	con elastic.Service
}

func NewCVEInternalFlagRepository(conf elastic.Config) CVEInternalFlagRepository {
	return &cveInternalFlagRepository{con: elastic.NewService(conf)}
}

func (inst *cveInternalFlagRepository) Name() string {
	return defs.IndexCveInternalFlag
}

func (inst *cveInternalFlagRepository) Find(ctx context.Context, query interface{}, sorts []string, offset, size int) ([]*model.CVEInternalFlag, int64, error) {
	if size == 0 {
		size = 10
	}
	result := make([]*model.CVEInternalFlag, 0)
	total, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		sorts,
		offset,
		size,
		&result)
	if err != nil {
		return nil, 0, err
	}
	return result, total, nil
}

func (inst *cveInternalFlagRepository) Store(ctx context.Context, document *model.CVEInternalFlag) error {
	if err := inst.con.InsertOne(inst.Name(), "", document); err != nil {
		return err
	}
	return nil
}

func (inst *cveInternalFlagRepository) StoreAll(ctx context.Context, documents []*model.CVEInternalFlag) error {
	if len(documents) == 0 {
		return nil
	}
	docs := make([]elastic.Document, 0)
	for _, document := range documents {
		docs = append(docs, document)
	}
	if err := inst.con.InsertMany(inst.Name(), "", docs); err != nil {
		return err
	}
	// Success
	return nil
}
