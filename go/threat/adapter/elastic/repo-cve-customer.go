package elastic

import (
	"context"

	"gitlab.viettelcyber.com/awesome-threat/library/adapter/elastic"

	"gitlab.viettelcyber.com/ti-micro/ws-threat/defs"
	"gitlab.viettelcyber.com/ti-micro/ws-threat/model"
)

type cveCustomerRepository struct {
	con elastic.Service
}

func NewCVECustomerRepository(conf elastic.Config) CVECustomerRepository {
	// Success
	return &cveCustomerRepository{con: elastic.NewService(conf)}
}

func (inst *cveCustomerRepository) Name() string {
	// Success
	return defs.IndexCveCustomer
}

func (inst *cveCustomerRepository) BulkInsert(ctx context.Context, docs []*model.CveCustomer) error {
	if len(docs) == 0 {
		return nil
	}
	data := make([]elastic.Document, 0)
	for _, doc := range docs {
		data = append(data, doc)
	}
	if err := inst.con.InsertMany(inst.Name(), "", data); err != nil {
		return err
	}
	// Success
	return nil
}

func (inst *cveCustomerRepository) BulkDelete(ctx context.Context, query any) error {
	return inst.con.DeleteMany(inst.Name(), "", query.(map[string]any))
}

func (inst *cveCustomerRepository) Find(ctx context.Context, query interface{}) ([]*model.CveCustomer, error) {
	size := 2000
	results := make([]*model.CveCustomer, 0)
	_, err := inst.con.FindOffset(
		inst.Name(),
		"",
		query.(map[string]interface{}),
		[]string{},
		0,
		size,
		&results)
	if err != nil {
		return nil, err
	}
	// Success
	return results, nil
}
