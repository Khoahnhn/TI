package model

import (
	"fmt"

	"gitlab.viettelcyber.com/awesome-threat/library/hash"
)

type (
	CVEEPSSHistory struct {
		ID            string   `json:"id"`
		CVEName       string   `json:"cve_name"`
		Date          int64    `json:"date"`
		Editor        string   `json:"editor"`
		OldScore      *float64 `json:"old_score"`
		NewScore      *float64 `json:"new_score"`
		OldPercentile *float64 `json:"old_percentile"`
		NewPercentile *float64 `json:"new_percentile"`
	}

	RequestEPSSHistorySearch struct {
		ID       string `json:"id" param:"id"`
		FromDate int64  `json:"from_data" query:"from_data"`
		ToDate   int64  `json:"to_data" query:"to_data"`
		Size     int    `query:"size" validate:"numeric,gte=0"`
		Offset   int    `query:"offset" validate:"numeric,gte=0"`
	}

	HistoryEPSSResponse struct {
		Data  []*CVEEPSSHistory `json:"data"`
		Total int64             `json:"total"`
	}
)

func (doc *CVEEPSSHistory) GetID() string {
	return doc.ID
}

func (doc *CVEEPSSHistory) SetEID(id string) {
	doc.ID = id
}

func (doc *CVEEPSSHistory) GenID() {
	doc.ID = hash.SHA1(fmt.Sprintf("%s--%d--%s", doc.CVEName, doc.Date, doc.Editor))
}

func (bodyRequestEPSSHistorySearch *RequestEPSSHistorySearch) PrepareQuery() map[string]interface{} {
	filterbodyRequestEPSSHistorySearch := []interface{}{
		map[string]interface{}{
			"term": map[string]interface{}{
				"cve_name": bodyRequestEPSSHistorySearch.ID,
			},
		},
	}

	if bodyRequestEPSSHistorySearch.FromDate > 0 && bodyRequestEPSSHistorySearch.ToDate > 0 {
		rangeQuery := map[string]interface{}{
			"from_date": bodyRequestEPSSHistorySearch.FromDate,
			"to_date":   bodyRequestEPSSHistorySearch.ToDate,
		}

		filterbodyRequestEPSSHistorySearch = append(filterbodyRequestEPSSHistorySearch, map[string]interface{}{
			"range": map[string]interface{}{
				"date": rangeQuery,
			},
		})
	}
	return map[string]interface{}{
		"bool": map[string]interface{}{
			"filter": filterbodyRequestEPSSHistorySearch,
		},
	}
}
