package model

import (
	"fmt"
	"gitlab.viettelcyber.com/awesome-threat/library/hash"
	"time"
)

type FlagLifeCycle bool
type CVELifecycleEventV2 string

const (
	CVE_EVENT_DETECTION CVELifecycleEventV2 = "detection"
)

type (
	CVELifeCycleV2 struct {
		ID         string              `json:"id"`
		Created    int64               `json:"created"`
		CVECode    string              `json:"cve_code"`
		CVEId      string              `json:"cve_id"`
		Event      CVELifecycleEventV2 `json:"event"`
		References []string            `json:"references"`
		Source     []string            `json:"source"`
	}

	RequestCVELifeCycleV2Search struct {
		ID       string `json:"id" param:"id"`
		FromDate int64  `json:"from_data"`
		ToDate   int64  `json:"to_data"`
		Size     int    `json:"size" validate:"numeric,gte=0"`
		Offset   int    `json:"offset" validate:"numeric,gte=0"`
	}

	CVELifecycleV2Response struct {
		Data  []*CVELifeCycleV2 `json:"data"`
		Total int64             `json:"total"`
	}
)

func (doc *CVELifeCycleV2) GetID() string {
	return doc.ID
}

func (doc *CVELifeCycleV2) SetEID(id string) {
	doc.ID = id
}

func (doc *CVELifeCycleV2) GenID() {
	id := hash.SHA1(fmt.Sprintf("%s_%d", doc.CVEId, time.Now().UnixMilli()))
	doc.ID = id
}

func (body *RequestCVELifeCycleV2Search) PrepareQuery() map[string]interface{} {
	filter := []interface{}{
		map[string]interface{}{
			"term": map[string]interface{}{
				"cve_id": body.ID,
			},
		},
	}

	if body.FromDate > 0 && body.ToDate > 0 {
		rangeQuery := map[string]interface{}{
			"from_date": body.FromDate,
			"to_date":   body.ToDate,
		}

		filter = append(filter, map[string]interface{}{
			"range": map[string]interface{}{
				"date": rangeQuery,
			},
		})
	}
	return map[string]interface{}{
		"bool": map[string]interface{}{
			"filter": filter,
		},
	}
}
