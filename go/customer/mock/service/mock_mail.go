// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/service/interface.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/service/interface.go -package=mock_service -destination=./mock/service/mock_mail.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "gitlab.viettelcyber.com/ti-micro/ws-customer/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMailService is a mock of MailService interface.
type MockMailService struct {
	ctrl     *gomock.Controller
	recorder *MockMailServiceMockRecorder
	isgomock struct{}
}

// MockMailServiceMockRecorder is the mock recorder for MockMailService.
type MockMailServiceMockRecorder struct {
	mock *MockMailService
}

// NewMockMailService creates a new mock instance.
func NewMockMailService(ctrl *gomock.Controller) *MockMailService {
	mock := &MockMailService{ctrl: ctrl}
	mock.recorder = &MockMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailService) EXPECT() *MockMailServiceMockRecorder {
	return m.recorder
}

// BuildAlertConfig mocks base method.
func (m *MockMailService) BuildAlertConfig(ctx context.Context, username, groupID string) (*model.AlertConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAlertConfig", ctx, username, groupID)
	ret0, _ := ret[0].(*model.AlertConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAlertConfig indicates an expected call of BuildAlertConfig.
func (mr *MockMailServiceMockRecorder) BuildAlertConfig(ctx, username, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAlertConfig", reflect.TypeOf((*MockMailService)(nil).BuildAlertConfig), ctx, username, groupID)
}

// GetCreateAccountBanner mocks base method.
func (m *MockMailService) GetCreateAccountBanner(lang string) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateAccountBanner", lang)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetCreateAccountBanner indicates an expected call of GetCreateAccountBanner.
func (mr *MockMailServiceMockRecorder) GetCreateAccountBanner(lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateAccountBanner", reflect.TypeOf((*MockMailService)(nil).GetCreateAccountBanner), lang)
}

// GetDefaultEmbeds mocks base method.
func (m *MockMailService) GetDefaultEmbeds(lang string) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultEmbeds", lang)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetDefaultEmbeds indicates an expected call of GetDefaultEmbeds.
func (mr *MockMailServiceMockRecorder) GetDefaultEmbeds(lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultEmbeds", reflect.TypeOf((*MockMailService)(nil).GetDefaultEmbeds), lang)
}

// SendEmailByAPI mocks base method.
func (m *MockMailService) SendEmailByAPI(receivers []string, subject, content string, embeds, attachments map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailByAPI", receivers, subject, content, embeds, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailByAPI indicates an expected call of SendEmailByAPI.
func (mr *MockMailServiceMockRecorder) SendEmailByAPI(receivers, subject, content, embeds, attachments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailByAPI", reflect.TypeOf((*MockMailService)(nil).SendEmailByAPI), receivers, subject, content, embeds, attachments)
}

// SendWelcomeEmail mocks base method.
func (m *MockMailService) SendWelcomeEmail(recipients []string, title, templateName string, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWelcomeEmail", recipients, title, templateName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWelcomeEmail indicates an expected call of SendWelcomeEmail.
func (mr *MockMailServiceMockRecorder) SendWelcomeEmail(recipients, title, templateName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWelcomeEmail", reflect.TypeOf((*MockMailService)(nil).SendWelcomeEmail), recipients, title, templateName, data)
}
