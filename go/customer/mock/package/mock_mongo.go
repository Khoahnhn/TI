// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo (interfaces: Database)
//
// Generated by this command:
//
//	mockgen --destination=./mock/package/mock_mongo.go --package=mock_package gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo Database
//

// Package mock_package is a generated GoMock package.
package mock_package

import (
	reflect "reflect"

	mongo "gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	bson "go.mongodb.org/mongo-driver/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockDatabase) Aggregate(database, collection string, pipeline []*bson.M, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", database, collection, pipeline, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockDatabaseMockRecorder) Aggregate(database, collection, pipeline, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockDatabase)(nil).Aggregate), database, collection, pipeline, results)
}

// AggregationCount mocks base method.
func (m *MockDatabase) AggregationCount(database, collection string, query *bson.M, fields []string) (map[string][]mongo.ResultAggregationCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregationCount", database, collection, query, fields)
	ret0, _ := ret[0].(map[string][]mongo.ResultAggregationCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregationCount indicates an expected call of AggregationCount.
func (mr *MockDatabaseMockRecorder) AggregationCount(database, collection, query, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregationCount", reflect.TypeOf((*MockDatabase)(nil).AggregationCount), database, collection, query, fields)
}

// Count mocks base method.
func (m *MockDatabase) Count(database, collection string, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", database, collection, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDatabaseMockRecorder) Count(database, collection, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDatabase)(nil).Count), database, collection, query)
}

// CreateIndex mocks base method.
func (m *MockDatabase) CreateIndex(database, collection string, index *bson.M, unique bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", database, collection, index, unique)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockDatabaseMockRecorder) CreateIndex(database, collection, index, unique any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockDatabase)(nil).CreateIndex), database, collection, index, unique)
}

// DeleteByID mocks base method.
func (m *MockDatabase) DeleteByID(database, collection string, id any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", database, collection, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockDatabaseMockRecorder) DeleteByID(database, collection, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockDatabase)(nil).DeleteByID), database, collection, id)
}

// DeleteMany mocks base method.
func (m *MockDatabase) DeleteMany(database, collection string, query *bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", database, collection, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockDatabaseMockRecorder) DeleteMany(database, collection, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockDatabase)(nil).DeleteMany), database, collection, query)
}

// DeleteOne mocks base method.
func (m *MockDatabase) DeleteOne(database, collection string, query *bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", database, collection, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockDatabaseMockRecorder) DeleteOne(database, collection, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockDatabase)(nil).DeleteOne), database, collection, query)
}

// FindMany mocks base method.
func (m *MockDatabase) FindMany(database, collection string, query *bson.M, sorts []string, offset, size int64, results any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", database, collection, query, sorts, offset, size, results)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockDatabaseMockRecorder) FindMany(database, collection, query, sorts, offset, size, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockDatabase)(nil).FindMany), database, collection, query, sorts, offset, size, results)
}

// FindOne mocks base method.
func (m *MockDatabase) FindOne(database, collection string, query *bson.M, sorts []string, offset int64, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", database, collection, query, sorts, offset, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockDatabaseMockRecorder) FindOne(database, collection, query, sorts, offset, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDatabase)(nil).FindOne), database, collection, query, sorts, offset, result)
}

// Get mocks base method.
func (m *MockDatabase) Get(database, collection, id string, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", database, collection, id, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseMockRecorder) Get(database, collection, id, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabase)(nil).Get), database, collection, id, result)
}

// InsertMany mocks base method.
func (m *MockDatabase) InsertMany(database, collection string, docs []mongo.Document, ordered bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", database, collection, docs, ordered)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockDatabaseMockRecorder) InsertMany(database, collection, docs, ordered any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockDatabase)(nil).InsertMany), database, collection, docs, ordered)
}

// InsertOne mocks base method.
func (m *MockDatabase) InsertOne(database, collection string, doc mongo.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", database, collection, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockDatabaseMockRecorder) InsertOne(database, collection, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDatabase)(nil).InsertOne), database, collection, doc)
}

// UpdateByID mocks base method.
func (m *MockDatabase) UpdateByID(database, collection string, id, update any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", database, collection, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockDatabaseMockRecorder) UpdateByID(database, collection, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockDatabase)(nil).UpdateByID), database, collection, id, update)
}

// UpdateMany mocks base method.
func (m *MockDatabase) UpdateMany(database, collection string, query *bson.M, update any, upsert bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", database, collection, query, update, upsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockDatabaseMockRecorder) UpdateMany(database, collection, query, update, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockDatabase)(nil).UpdateMany), database, collection, query, update, upsert)
}

// UpdateOne mocks base method.
func (m *MockDatabase) UpdateOne(database, collection string, query *bson.M, update any, upsert bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", database, collection, query, update, upsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockDatabaseMockRecorder) UpdateOne(database, collection, query, update, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockDatabase)(nil).UpdateOne), database, collection, query, update, upsert)
}
