// Code generated by MockGen. DO NOT EDIT.
// Source: handler/interface.go
//
// Generated by this command:
//
//	mockgen -source=handler/interface.go -destination=mock/handler/mock_manager_user_handler.go -package=mock_handler
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	model "gitlab.viettelcyber.com/ti-micro/ws-customer/model"
	bson "go.mongodb.org/mongo-driver/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockAssetHandlerInterface is a mock of AssetHandlerInterface interface.
type MockAssetHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockAssetHandlerInterfaceMockRecorder is the mock recorder for MockAssetHandlerInterface.
type MockAssetHandlerInterfaceMockRecorder struct {
	mock *MockAssetHandlerInterface
}

// NewMockAssetHandlerInterface creates a new mock instance.
func NewMockAssetHandlerInterface(ctrl *gomock.Controller) *MockAssetHandlerInterface {
	mock := &MockAssetHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockAssetHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetHandlerInterface) EXPECT() *MockAssetHandlerInterfaceMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockAssetHandlerInterface) Action(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockAssetHandlerInterfaceMockRecorder) Action(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockAssetHandlerInterface)(nil).Action), c)
}

// Config mocks base method.
func (m *MockAssetHandlerInterface) Config(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockAssetHandlerInterfaceMockRecorder) Config(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockAssetHandlerInterface)(nil).Config), c)
}

// History mocks base method.
func (m *MockAssetHandlerInterface) History(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// History indicates an expected call of History.
func (mr *MockAssetHandlerInterfaceMockRecorder) History(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockAssetHandlerInterface)(nil).History), c)
}

// MockAssetDomainIPAddressInterface is a mock of AssetDomainIPAddressInterface interface.
type MockAssetDomainIPAddressInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetDomainIPAddressInterfaceMockRecorder
	isgomock struct{}
}

// MockAssetDomainIPAddressInterfaceMockRecorder is the mock recorder for MockAssetDomainIPAddressInterface.
type MockAssetDomainIPAddressInterfaceMockRecorder struct {
	mock *MockAssetDomainIPAddressInterface
}

// NewMockAssetDomainIPAddressInterface creates a new mock instance.
func NewMockAssetDomainIPAddressInterface(ctrl *gomock.Controller) *MockAssetDomainIPAddressInterface {
	mock := &MockAssetDomainIPAddressInterface{ctrl: ctrl}
	mock.recorder = &MockAssetDomainIPAddressInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetDomainIPAddressInterface) EXPECT() *MockAssetDomainIPAddressInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssetDomainIPAddressInterface) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockAssetDomainIPAddressInterface) Delete(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Delete(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Delete), c)
}

// Edit mocks base method.
func (m *MockAssetDomainIPAddressInterface) Edit(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Edit(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Edit), c)
}

// Exist mocks base method.
func (m *MockAssetDomainIPAddressInterface) Exist(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Exist(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Exist), c)
}

// GetTags mocks base method.
func (m *MockAssetDomainIPAddressInterface) GetTags(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) GetTags(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).GetTags), c)
}

// Import mocks base method.
func (m *MockAssetDomainIPAddressInterface) Import(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Import(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Import), c)
}

// Owner mocks base method.
func (m *MockAssetDomainIPAddressInterface) Owner(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Owner(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Owner), c)
}

// Search mocks base method.
func (m *MockAssetDomainIPAddressInterface) Search(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Search(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Search), c)
}

// Statistic mocks base method.
func (m *MockAssetDomainIPAddressInterface) Statistic(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistic", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statistic indicates an expected call of Statistic.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Statistic(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistic", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Statistic), c)
}

// Synchronize mocks base method.
func (m *MockAssetDomainIPAddressInterface) Synchronize(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synchronize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Synchronize indicates an expected call of Synchronize.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Synchronize(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Synchronize), c)
}

// Upload mocks base method.
func (m *MockAssetDomainIPAddressInterface) Upload(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Upload(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Upload), c)
}

// Validate mocks base method.
func (m *MockAssetDomainIPAddressInterface) Validate(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAssetDomainIPAddressInterfaceMockRecorder) Validate(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAssetDomainIPAddressInterface)(nil).Validate), c)
}

// MockAssetProductHandlerInterface is a mock of AssetProductHandlerInterface interface.
type MockAssetProductHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetProductHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockAssetProductHandlerInterfaceMockRecorder is the mock recorder for MockAssetProductHandlerInterface.
type MockAssetProductHandlerInterfaceMockRecorder struct {
	mock *MockAssetProductHandlerInterface
}

// NewMockAssetProductHandlerInterface creates a new mock instance.
func NewMockAssetProductHandlerInterface(ctrl *gomock.Controller) *MockAssetProductHandlerInterface {
	mock := &MockAssetProductHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockAssetProductHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetProductHandlerInterface) EXPECT() *MockAssetProductHandlerInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssetProductHandlerInterface) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockAssetProductHandlerInterface) Delete(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Delete(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Delete), c)
}

// DownloadReport mocks base method.
func (m *MockAssetProductHandlerInterface) DownloadReport(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReport", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadReport indicates an expected call of DownloadReport.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) DownloadReport(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReport", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).DownloadReport), c)
}

// Edit mocks base method.
func (m *MockAssetProductHandlerInterface) Edit(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Edit(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Edit), c)
}

// Exist mocks base method.
func (m *MockAssetProductHandlerInterface) Exist(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Exist(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Exist), c)
}

// Import mocks base method.
func (m *MockAssetProductHandlerInterface) Import(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Import(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Import), c)
}

// Search mocks base method.
func (m *MockAssetProductHandlerInterface) Search(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Search(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Search), c)
}

// Statistic mocks base method.
func (m *MockAssetProductHandlerInterface) Statistic(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistic", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statistic indicates an expected call of Statistic.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Statistic(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistic", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Statistic), c)
}

// Synchronize mocks base method.
func (m *MockAssetProductHandlerInterface) Synchronize(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synchronize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Synchronize indicates an expected call of Synchronize.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Synchronize(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Synchronize), c)
}

// Upload mocks base method.
func (m *MockAssetProductHandlerInterface) Upload(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockAssetProductHandlerInterfaceMockRecorder) Upload(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAssetProductHandlerInterface)(nil).Upload), c)
}

// MockRoleHandlerInterface is a mock of RoleHandlerInterface interface.
type MockRoleHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockRoleHandlerInterfaceMockRecorder is the mock recorder for MockRoleHandlerInterface.
type MockRoleHandlerInterfaceMockRecorder struct {
	mock *MockRoleHandlerInterface
}

// NewMockRoleHandlerInterface creates a new mock instance.
func NewMockRoleHandlerInterface(ctrl *gomock.Controller) *MockRoleHandlerInterface {
	mock := &MockRoleHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockRoleHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleHandlerInterface) EXPECT() *MockRoleHandlerInterfaceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleHandlerInterface) CreateRole(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleHandlerInterfaceMockRecorder) CreateRole(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleHandlerInterface)(nil).CreateRole), c)
}

// DeleteRole mocks base method.
func (m *MockRoleHandlerInterface) DeleteRole(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleHandlerInterfaceMockRecorder) DeleteRole(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleHandlerInterface)(nil).DeleteRole), c)
}

// DetailRole mocks base method.
func (m *MockRoleHandlerInterface) DetailRole(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailRole", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetailRole indicates an expected call of DetailRole.
func (mr *MockRoleHandlerInterfaceMockRecorder) DetailRole(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailRole", reflect.TypeOf((*MockRoleHandlerInterface)(nil).DetailRole), c)
}

// EditRole mocks base method.
func (m *MockRoleHandlerInterface) EditRole(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRole", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRole indicates an expected call of EditRole.
func (mr *MockRoleHandlerInterfaceMockRecorder) EditRole(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRole", reflect.TypeOf((*MockRoleHandlerInterface)(nil).EditRole), c)
}

// Search mocks base method.
func (m *MockRoleHandlerInterface) Search(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockRoleHandlerInterfaceMockRecorder) Search(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRoleHandlerInterface)(nil).Search), c)
}

// Statistic mocks base method.
func (m *MockRoleHandlerInterface) Statistic(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistic", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statistic indicates an expected call of Statistic.
func (mr *MockRoleHandlerInterfaceMockRecorder) Statistic(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistic", reflect.TypeOf((*MockRoleHandlerInterface)(nil).Statistic), c)
}

// MockOrganizationHandlerInterface is a mock of OrganizationHandlerInterface interface.
type MockOrganizationHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockOrganizationHandlerInterfaceMockRecorder is the mock recorder for MockOrganizationHandlerInterface.
type MockOrganizationHandlerInterfaceMockRecorder struct {
	mock *MockOrganizationHandlerInterface
}

// NewMockOrganizationHandlerInterface creates a new mock instance.
func NewMockOrganizationHandlerInterface(ctrl *gomock.Controller) *MockOrganizationHandlerInterface {
	mock := &MockOrganizationHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockOrganizationHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationHandlerInterface) EXPECT() *MockOrganizationHandlerInterfaceMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockOrganizationHandlerInterface) ChangeStatus(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) ChangeStatus(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).ChangeStatus), c)
}

// CreateOrganizations mocks base method.
func (m *MockOrganizationHandlerInterface) CreateOrganizations(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizations", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizations indicates an expected call of CreateOrganizations.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) CreateOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizations", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).CreateOrganizations), c)
}

// DetailOrganization mocks base method.
func (m *MockOrganizationHandlerInterface) DetailOrganization(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailOrganization", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetailOrganization indicates an expected call of DetailOrganization.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) DetailOrganization(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailOrganization", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).DetailOrganization), c)
}

// GetHistories mocks base method.
func (m *MockOrganizationHandlerInterface) GetHistories(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistories", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHistories indicates an expected call of GetHistories.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) GetHistories(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistories", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).GetHistories), c)
}

// GetHistoryDetail mocks base method.
func (m *MockOrganizationHandlerInterface) GetHistoryDetail(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryDetail", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHistoryDetail indicates an expected call of GetHistoryDetail.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) GetHistoryDetail(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryDetail", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).GetHistoryDetail), c)
}

// ListIndustry mocks base method.
func (m *MockOrganizationHandlerInterface) ListIndustry(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndustry", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndustry indicates an expected call of ListIndustry.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) ListIndustry(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndustry", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).ListIndustry), c)
}

// ListOrganizations mocks base method.
func (m *MockOrganizationHandlerInterface) ListOrganizations(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) ListOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).ListOrganizations), c)
}

// SearchOrganizations mocks base method.
func (m *MockOrganizationHandlerInterface) SearchOrganizations(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganizations", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchOrganizations indicates an expected call of SearchOrganizations.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) SearchOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizations", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).SearchOrganizations), c)
}

// Statistics mocks base method.
func (m *MockOrganizationHandlerInterface) Statistics(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statistics indicates an expected call of Statistics.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) Statistics(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).Statistics), c)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationHandlerInterface) UpdateOrganization(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationHandlerInterfaceMockRecorder) UpdateOrganization(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationHandlerInterface)(nil).UpdateOrganization), c)
}

// MockManagerUserHandlerInterface is a mock of ManagerUserHandlerInterface interface.
type MockManagerUserHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerUserHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockManagerUserHandlerInterfaceMockRecorder is the mock recorder for MockManagerUserHandlerInterface.
type MockManagerUserHandlerInterfaceMockRecorder struct {
	mock *MockManagerUserHandlerInterface
}

// NewMockManagerUserHandlerInterface creates a new mock instance.
func NewMockManagerUserHandlerInterface(ctrl *gomock.Controller) *MockManagerUserHandlerInterface {
	mock := &MockManagerUserHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerUserHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerUserHandlerInterface) EXPECT() *MockManagerUserHandlerInterfaceMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockManagerUserHandlerInterface) ChangeStatus(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) ChangeStatus(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).ChangeStatus), c)
}

// CreatePublicUser mocks base method.
func (m *MockManagerUserHandlerInterface) CreatePublicUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePublicUser indicates an expected call of CreatePublicUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) CreatePublicUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).CreatePublicUser), c)
}

// CreateUser mocks base method.
func (m *MockManagerUserHandlerInterface) CreateUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) CreateUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).CreateUser), c)
}

// DeletePublicUser mocks base method.
func (m *MockManagerUserHandlerInterface) DeletePublicUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicUser indicates an expected call of DeletePublicUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) DeletePublicUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).DeletePublicUser), c)
}

// DeleteUser mocks base method.
func (m *MockManagerUserHandlerInterface) DeleteUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) DeleteUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).DeleteUser), c)
}

// Detail mocks base method.
func (m *MockManagerUserHandlerInterface) Detail(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detail indicates an expected call of Detail.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) Detail(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).Detail), c)
}

// EditUser mocks base method.
func (m *MockManagerUserHandlerInterface) EditUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUser indicates an expected call of EditUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) EditUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).EditUser), c)
}

// GetAlertConfig mocks base method.
func (m *MockManagerUserHandlerInterface) GetAlertConfig(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertConfig", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAlertConfig indicates an expected call of GetAlertConfig.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetAlertConfig(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertConfig", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetAlertConfig), c)
}

// GetCountries mocks base method.
func (m *MockManagerUserHandlerInterface) GetCountries(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetCountries(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetCountries), c)
}

// GetOrganization mocks base method.
func (m *MockManagerUserHandlerInterface) GetOrganization(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetOrganization(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetOrganization), c)
}

// GetPositionJobs mocks base method.
func (m *MockManagerUserHandlerInterface) GetPositionJobs(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionJobs", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPositionJobs indicates an expected call of GetPositionJobs.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetPositionJobs(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionJobs", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetPositionJobs), c)
}

// GetStatistical mocks base method.
func (m *MockManagerUserHandlerInterface) GetStatistical(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistical", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatistical indicates an expected call of GetStatistical.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetStatistical(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistical", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetStatistical), c)
}

// GetUser mocks base method.
func (m *MockManagerUserHandlerInterface) GetUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetUser), c)
}

// GetUserHistories mocks base method.
func (m *MockManagerUserHandlerInterface) GetUserHistories(c context.Context, search *model.SearchUserHistory, sorts []bson.M, offset, limit int64) ([]*model.UserHistory, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistories", c, search, sorts, offset, limit)
	ret0, _ := ret[0].([]*model.UserHistory)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserHistories indicates an expected call of GetUserHistories.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetUserHistories(c, search, sorts, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistories", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetUserHistories), c, search, sorts, offset, limit)
}

// GetUserHistoryDetail mocks base method.
func (m *MockManagerUserHandlerInterface) GetUserHistoryDetail(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistoryDetail", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserHistoryDetail indicates an expected call of GetUserHistoryDetail.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetUserHistoryDetail(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistoryDetail", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetUserHistoryDetail), c)
}

// GetUsers mocks base method.
func (m *MockManagerUserHandlerInterface) GetUsers(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) GetUsers(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).GetUsers), c)
}

// List mocks base method.
func (m *MockManagerUserHandlerInterface) List(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) List(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).List), c)
}

// ListUserHistory mocks base method.
func (m *MockManagerUserHandlerInterface) ListUserHistory(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHistory", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserHistory indicates an expected call of ListUserHistory.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) ListUserHistory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHistory", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).ListUserHistory), c)
}

// SearchOrganization mocks base method.
func (m *MockManagerUserHandlerInterface) SearchOrganization(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganization", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchOrganization indicates an expected call of SearchOrganization.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) SearchOrganization(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganization", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).SearchOrganization), c)
}

// SetupMail mocks base method.
func (m *MockManagerUserHandlerInterface) SetupMail(user *model.UserV3, password, apiKey string, group *model.Organization, role *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupMail", user, password, apiKey, group, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupMail indicates an expected call of SetupMail.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) SetupMail(user, password, apiKey, group, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupMail", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).SetupMail), user, password, apiKey, group, role)
}

// StatisticV3 mocks base method.
func (m *MockManagerUserHandlerInterface) StatisticV3(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatisticV3", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatisticV3 indicates an expected call of StatisticV3.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) StatisticV3(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticV3", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).StatisticV3), c)
}

// UpdatePublicUser mocks base method.
func (m *MockManagerUserHandlerInterface) UpdatePublicUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublicUser indicates an expected call of UpdatePublicUser.
func (mr *MockManagerUserHandlerInterfaceMockRecorder) UpdatePublicUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicUser", reflect.TypeOf((*MockManagerUserHandlerInterface)(nil).UpdatePublicUser), c)
}

// MockPermissionHandlerInterface is a mock of PermissionHandlerInterface interface.
type MockPermissionHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockPermissionHandlerInterfaceMockRecorder is the mock recorder for MockPermissionHandlerInterface.
type MockPermissionHandlerInterfaceMockRecorder struct {
	mock *MockPermissionHandlerInterface
}

// NewMockPermissionHandlerInterface creates a new mock instance.
func NewMockPermissionHandlerInterface(ctrl *gomock.Controller) *MockPermissionHandlerInterface {
	mock := &MockPermissionHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockPermissionHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionHandlerInterface) EXPECT() *MockPermissionHandlerInterfaceMockRecorder {
	return m.recorder
}

// ChangeModule mocks base method.
func (m *MockPermissionHandlerInterface) ChangeModule(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeModule", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeModule indicates an expected call of ChangeModule.
func (mr *MockPermissionHandlerInterfaceMockRecorder) ChangeModule(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeModule", reflect.TypeOf((*MockPermissionHandlerInterface)(nil).ChangeModule), c)
}

// GetPermissions mocks base method.
func (m *MockPermissionHandlerInterface) GetPermissions(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockPermissionHandlerInterfaceMockRecorder) GetPermissions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockPermissionHandlerInterface)(nil).GetPermissions), c)
}

// UpdatePermission mocks base method.
func (m *MockPermissionHandlerInterface) UpdatePermission(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockPermissionHandlerInterfaceMockRecorder) UpdatePermission(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockPermissionHandlerInterface)(nil).UpdatePermission), c)
}

// MockFeatureHandlerInterface is a mock of FeatureHandlerInterface interface.
type MockFeatureHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockFeatureHandlerInterfaceMockRecorder is the mock recorder for MockFeatureHandlerInterface.
type MockFeatureHandlerInterfaceMockRecorder struct {
	mock *MockFeatureHandlerInterface
}

// NewMockFeatureHandlerInterface creates a new mock instance.
func NewMockFeatureHandlerInterface(ctrl *gomock.Controller) *MockFeatureHandlerInterface {
	mock := &MockFeatureHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockFeatureHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureHandlerInterface) EXPECT() *MockFeatureHandlerInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeatureHandlerInterface) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFeatureHandlerInterfaceMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeatureHandlerInterface)(nil).Create), c)
}

// DetailFeature mocks base method.
func (m *MockFeatureHandlerInterface) DetailFeature(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailFeature", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetailFeature indicates an expected call of DetailFeature.
func (mr *MockFeatureHandlerInterfaceMockRecorder) DetailFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailFeature", reflect.TypeOf((*MockFeatureHandlerInterface)(nil).DetailFeature), c)
}

// Edit mocks base method.
func (m *MockFeatureHandlerInterface) Edit(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockFeatureHandlerInterfaceMockRecorder) Edit(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockFeatureHandlerInterface)(nil).Edit), c)
}

// GetAllFeature mocks base method.
func (m *MockFeatureHandlerInterface) GetAllFeature(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeature", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllFeature indicates an expected call of GetAllFeature.
func (mr *MockFeatureHandlerInterfaceMockRecorder) GetAllFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeature", reflect.TypeOf((*MockFeatureHandlerInterface)(nil).GetAllFeature), c)
}
