// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/mongo/interface.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/mongo/interface.go -package=mock_repo -destination=./mock/repo/mock_mongo.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	mongo "gitlab.viettelcyber.com/awesome-threat/library/adapter/mongo"
	mongo0 "gitlab.viettelcyber.com/ti-micro/ws-customer/adapter/mongo"
	model "gitlab.viettelcyber.com/ti-micro/ws-customer/model"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
	isgomock struct{}
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *Mockrepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockrepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Mockrepository)(nil).Name))
}

// MockGlobalRepository is a mock of GlobalRepository interface.
type MockGlobalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRepositoryMockRecorder
	isgomock struct{}
}

// MockGlobalRepositoryMockRecorder is the mock recorder for MockGlobalRepository.
type MockGlobalRepositoryMockRecorder struct {
	mock *MockGlobalRepository
}

// NewMockGlobalRepository creates a new mock instance.
func NewMockGlobalRepository(ctrl *gomock.Controller) *MockGlobalRepository {
	mock := &MockGlobalRepository{ctrl: ctrl}
	mock.recorder = &MockGlobalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRepository) EXPECT() *MockGlobalRepositoryMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockGlobalRepository) Account() mongo0.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(mongo0.AccountRepository)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockGlobalRepositoryMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockGlobalRepository)(nil).Account))
}

// Settings mocks base method.
func (m *MockGlobalRepository) Settings() mongo0.SettingsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings")
	ret0, _ := ret[0].(mongo0.SettingsRepository)
	return ret0
}

// Settings indicates an expected call of Settings.
func (mr *MockGlobalRepositoryMockRecorder) Settings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockGlobalRepository)(nil).Settings))
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// DefaultSetting mocks base method.
func (m *MockAccountRepository) DefaultSetting() mongo0.DefaultSettingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultSetting")
	ret0, _ := ret[0].(mongo0.DefaultSettingRepository)
	return ret0
}

// DefaultSetting indicates an expected call of DefaultSetting.
func (mr *MockAccountRepositoryMockRecorder) DefaultSetting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSetting", reflect.TypeOf((*MockAccountRepository)(nil).DefaultSetting))
}

// Features mocks base method.
func (m *MockAccountRepository) Features() mongo0.FeaturesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(mongo0.FeaturesRepository)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockAccountRepositoryMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockAccountRepository)(nil).Features))
}

// GroupSetting mocks base method.
func (m *MockAccountRepository) GroupSetting() mongo0.GroupSettingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupSetting")
	ret0, _ := ret[0].(mongo0.GroupSettingRepository)
	return ret0
}

// GroupSetting indicates an expected call of GroupSetting.
func (mr *MockAccountRepositoryMockRecorder) GroupSetting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupSetting", reflect.TypeOf((*MockAccountRepository)(nil).GroupSetting))
}

// GroupUser mocks base method.
func (m *MockAccountRepository) GroupUser() mongo0.GroupUserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUser")
	ret0, _ := ret[0].(mongo0.GroupUserRepository)
	return ret0
}

// GroupUser indicates an expected call of GroupUser.
func (mr *MockAccountRepositoryMockRecorder) GroupUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUser", reflect.TypeOf((*MockAccountRepository)(nil).GroupUser))
}

// GroupUserV2 mocks base method.
func (m *MockAccountRepository) GroupUserV2() mongo0.GroupUserRepositoryV2 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUserV2")
	ret0, _ := ret[0].(mongo0.GroupUserRepositoryV2)
	return ret0
}

// GroupUserV2 indicates an expected call of GroupUserV2.
func (mr *MockAccountRepositoryMockRecorder) GroupUserV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUserV2", reflect.TypeOf((*MockAccountRepository)(nil).GroupUserV2))
}

// OrgHistory mocks base method.
func (m *MockAccountRepository) OrgHistory() mongo0.OrganizationHistoryRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrgHistory")
	ret0, _ := ret[0].(mongo0.OrganizationHistoryRepo)
	return ret0
}

// OrgHistory indicates an expected call of OrgHistory.
func (mr *MockAccountRepositoryMockRecorder) OrgHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgHistory", reflect.TypeOf((*MockAccountRepository)(nil).OrgHistory))
}

// Permissions mocks base method.
func (m *MockAccountRepository) Permissions() mongo0.PermissionsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(mongo0.PermissionsRepository)
	return ret0
}

// Permissions indicates an expected call of Permissions.
func (mr *MockAccountRepositoryMockRecorder) Permissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockAccountRepository)(nil).Permissions))
}

// Roles mocks base method.
func (m *MockAccountRepository) Roles() mongo0.RolesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(mongo0.RolesRepository)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockAccountRepositoryMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockAccountRepository)(nil).Roles))
}

// User mocks base method.
func (m *MockAccountRepository) User() mongo0.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(mongo0.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockAccountRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockAccountRepository)(nil).User))
}

// UserHistory mocks base method.
func (m *MockAccountRepository) UserHistory() mongo0.UserHistoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHistory")
	ret0, _ := ret[0].(mongo0.UserHistoryRepository)
	return ret0
}

// UserHistory indicates an expected call of UserHistory.
func (mr *MockAccountRepositoryMockRecorder) UserHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHistory", reflect.TypeOf((*MockAccountRepository)(nil).UserHistory))
}

// UserSetting mocks base method.
func (m *MockAccountRepository) UserSetting() mongo0.UserSettingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSetting")
	ret0, _ := ret[0].(mongo0.UserSettingRepository)
	return ret0
}

// UserSetting indicates an expected call of UserSetting.
func (mr *MockAccountRepositoryMockRecorder) UserSetting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSetting", reflect.TypeOf((*MockAccountRepository)(nil).UserSetting))
}

// UserV3 mocks base method.
func (m *MockAccountRepository) UserV3() mongo0.UserV3Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserV3")
	ret0, _ := ret[0].(mongo0.UserV3Repository)
	return ret0
}

// UserV3 indicates an expected call of UserV3.
func (mr *MockAccountRepositoryMockRecorder) UserV3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserV3", reflect.TypeOf((*MockAccountRepository)(nil).UserV3))
}

// MockSettingsRepository is a mock of SettingsRepository interface.
type MockSettingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsRepositoryMockRecorder
	isgomock struct{}
}

// MockSettingsRepositoryMockRecorder is the mock recorder for MockSettingsRepository.
type MockSettingsRepositoryMockRecorder struct {
	mock *MockSettingsRepository
}

// NewMockSettingsRepository creates a new mock instance.
func NewMockSettingsRepository(ctrl *gomock.Controller) *MockSettingsRepository {
	mock := &MockSettingsRepository{ctrl: ctrl}
	mock.recorder = &MockSettingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsRepository) EXPECT() *MockSettingsRepositoryMockRecorder {
	return m.recorder
}

// Schedule mocks base method.
func (m *MockSettingsRepository) Schedule() mongo0.ScheduleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(mongo0.ScheduleRepository)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSettingsRepositoryMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockSettingsRepository)(nil).Schedule))
}

// MockPermissionsRepository is a mock of PermissionsRepository interface.
type MockPermissionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsRepositoryMockRecorder
	isgomock struct{}
}

// MockPermissionsRepositoryMockRecorder is the mock recorder for MockPermissionsRepository.
type MockPermissionsRepositoryMockRecorder struct {
	mock *MockPermissionsRepository
}

// NewMockPermissionsRepository creates a new mock instance.
func NewMockPermissionsRepository(ctrl *gomock.Controller) *MockPermissionsRepository {
	mock := &MockPermissionsRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsRepository) EXPECT() *MockPermissionsRepositoryMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockPermissionsRepository) Aggregate(ctx context.Context, pipeline []*bson.M, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, pipeline, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockPermissionsRepositoryMockRecorder) Aggregate(ctx, pipeline, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockPermissionsRepository)(nil).Aggregate), ctx, pipeline, result)
}

// CountPermissions mocks base method.
func (m *MockPermissionsRepository) CountPermissions(ctx context.Context, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPermissions", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPermissions indicates an expected call of CountPermissions.
func (mr *MockPermissionsRepositoryMockRecorder) CountPermissions(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPermissions", reflect.TypeOf((*MockPermissionsRepository)(nil).CountPermissions), ctx, query)
}

// GetAll mocks base method.
func (m *MockPermissionsRepository) GetAll(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPermissionsRepositoryMockRecorder) GetAll(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPermissionsRepository)(nil).GetAll), ctx, query, sorts, offset, size)
}

// GetByPermissionID mocks base method.
func (m *MockPermissionsRepository) GetByPermissionID(ctx context.Context, permissions []string, offset, size int64) ([]*model.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPermissionID", ctx, permissions, offset, size)
	ret0, _ := ret[0].([]*model.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPermissionID indicates an expected call of GetByPermissionID.
func (mr *MockPermissionsRepositoryMockRecorder) GetByPermissionID(ctx, permissions, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPermissionID", reflect.TypeOf((*MockPermissionsRepository)(nil).GetByPermissionID), ctx, permissions, offset, size)
}

// Name mocks base method.
func (m *MockPermissionsRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockPermissionsRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPermissionsRepository)(nil).Name))
}

// UpdateByID mocks base method.
func (m *MockPermissionsRepository) UpdateByID(ctx context.Context, id string, doc *model.UpdatePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockPermissionsRepositoryMockRecorder) UpdateByID(ctx, id, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockPermissionsRepository)(nil).UpdateByID), ctx, id, doc)
}

// UpdateFeature mocks base method.
func (m *MockPermissionsRepository) UpdateFeature(ctx context.Context, request model.UpdateFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockPermissionsRepositoryMockRecorder) UpdateFeature(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockPermissionsRepository)(nil).UpdateFeature), ctx, request)
}

// MockFeaturesRepository is a mock of FeaturesRepository interface.
type MockFeaturesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesRepositoryMockRecorder
	isgomock struct{}
}

// MockFeaturesRepositoryMockRecorder is the mock recorder for MockFeaturesRepository.
type MockFeaturesRepositoryMockRecorder struct {
	mock *MockFeaturesRepository
}

// NewMockFeaturesRepository creates a new mock instance.
func NewMockFeaturesRepository(ctrl *gomock.Controller) *MockFeaturesRepository {
	mock := &MockFeaturesRepository{ctrl: ctrl}
	mock.recorder = &MockFeaturesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesRepository) EXPECT() *MockFeaturesRepositoryMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockFeaturesRepository) Aggregate(ctx context.Context, pipeline []*bson.M, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, pipeline, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockFeaturesRepositoryMockRecorder) Aggregate(ctx, pipeline, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockFeaturesRepository)(nil).Aggregate), ctx, pipeline, result)
}

// Count mocks base method.
func (m *MockFeaturesRepository) Count(ctx context.Context, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockFeaturesRepositoryMockRecorder) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockFeaturesRepository)(nil).Count), ctx, query)
}

// Find mocks base method.
func (m *MockFeaturesRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFeaturesRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFeaturesRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindMany mocks base method.
func (m *MockFeaturesRepository) FindMany(ctx context.Context, query *bson.M) ([]*model.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, query)
	ret0, _ := ret[0].([]*model.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockFeaturesRepositoryMockRecorder) FindMany(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockFeaturesRepository)(nil).FindMany), ctx, query)
}

// GetByCode mocks base method.
func (m *MockFeaturesRepository) GetByCode(ctx context.Context, code []string, offset, size int64) ([]*model.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code, offset, size)
	ret0, _ := ret[0].([]*model.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockFeaturesRepositoryMockRecorder) GetByCode(ctx, code, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockFeaturesRepository)(nil).GetByCode), ctx, code, offset, size)
}

// GetByName mocks base method.
func (m *MockFeaturesRepository) GetByName(ctx context.Context, name string) (*model.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockFeaturesRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockFeaturesRepository)(nil).GetByName), ctx, name)
}

// Name mocks base method.
func (m *MockFeaturesRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockFeaturesRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFeaturesRepository)(nil).Name))
}

// Store mocks base method.
func (m *MockFeaturesRepository) Store(ctx context.Context, doc *model.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockFeaturesRepositoryMockRecorder) Store(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockFeaturesRepository)(nil).Store), ctx, doc)
}

// UpdateByID mocks base method.
func (m *MockFeaturesRepository) UpdateByID(ctx context.Context, id string, document *model.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockFeaturesRepositoryMockRecorder) UpdateByID(ctx, id, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockFeaturesRepository)(nil).UpdateByID), ctx, id, document)
}

// UpdateMany mocks base method.
func (m *MockFeaturesRepository) UpdateMany(ctx context.Context, query *bson.M, update bson.A, upsert bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, query, update, upsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockFeaturesRepositoryMockRecorder) UpdateMany(ctx, query, update, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockFeaturesRepository)(nil).UpdateMany), ctx, query, update, upsert)
}

// MockRolesRepository is a mock of RolesRepository interface.
type MockRolesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRolesRepositoryMockRecorder
	isgomock struct{}
}

// MockRolesRepositoryMockRecorder is the mock recorder for MockRolesRepository.
type MockRolesRepositoryMockRecorder struct {
	mock *MockRolesRepository
}

// NewMockRolesRepository creates a new mock instance.
func NewMockRolesRepository(ctrl *gomock.Controller) *MockRolesRepository {
	mock := &MockRolesRepository{ctrl: ctrl}
	mock.recorder = &MockRolesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesRepository) EXPECT() *MockRolesRepositoryMockRecorder {
	return m.recorder
}

// AggregationCount mocks base method.
func (m *MockRolesRepository) AggregationCount(ctx context.Context, query *bson.M, fields []string) (map[string][]mongo.ResultAggregationCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregationCount", ctx, query, fields)
	ret0, _ := ret[0].(map[string][]mongo.ResultAggregationCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregationCount indicates an expected call of AggregationCount.
func (mr *MockRolesRepositoryMockRecorder) AggregationCount(ctx, query, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregationCount", reflect.TypeOf((*MockRolesRepository)(nil).AggregationCount), ctx, query, fields)
}

// Count mocks base method.
func (m *MockRolesRepository) Count(ctx context.Context, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRolesRepositoryMockRecorder) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRolesRepository)(nil).Count), ctx, query)
}

// DeleteByID mocks base method.
func (m *MockRolesRepository) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRolesRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRolesRepository)(nil).DeleteByID), ctx, id)
}

// Find mocks base method.
func (m *MockRolesRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRolesRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRolesRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindAll mocks base method.
func (m *MockRolesRepository) FindAll(ctx context.Context, query *bson.M, sorts []string) ([]*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRolesRepositoryMockRecorder) FindAll(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRolesRepository)(nil).FindAll), ctx, query, sorts)
}

// GetByName mocks base method.
func (m *MockRolesRepository) GetByName(ctx context.Context, name string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRolesRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRolesRepository)(nil).GetByName), ctx, name)
}

// HasPermission mocks base method.
func (m *MockRolesRepository) HasPermission(role *model.Role, permission string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", role, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockRolesRepositoryMockRecorder) HasPermission(role, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockRolesRepository)(nil).HasPermission), role, permission)
}

// Name mocks base method.
func (m *MockRolesRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockRolesRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRolesRepository)(nil).Name))
}

// Store mocks base method.
func (m *MockRolesRepository) Store(ctx context.Context, document *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockRolesRepositoryMockRecorder) Store(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRolesRepository)(nil).Store), ctx, document)
}

// UpdateByID mocks base method.
func (m *MockRolesRepository) UpdateByID(ctx context.Context, id string, document *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRolesRepositoryMockRecorder) UpdateByID(ctx, id, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRolesRepository)(nil).UpdateByID), ctx, id, document)
}

// MockGroupUserRepository is a mock of GroupUserRepository interface.
type MockGroupUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupUserRepositoryMockRecorder
	isgomock struct{}
}

// MockGroupUserRepositoryMockRecorder is the mock recorder for MockGroupUserRepository.
type MockGroupUserRepositoryMockRecorder struct {
	mock *MockGroupUserRepository
}

// NewMockGroupUserRepository creates a new mock instance.
func NewMockGroupUserRepository(ctrl *gomock.Controller) *MockGroupUserRepository {
	mock := &MockGroupUserRepository{ctrl: ctrl}
	mock.recorder = &MockGroupUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupUserRepository) EXPECT() *MockGroupUserRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockGroupUserRepository) Count(ctx context.Context, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockGroupUserRepositoryMockRecorder) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGroupUserRepository)(nil).Count), ctx, query)
}

// Find mocks base method.
func (m *MockGroupUserRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGroupUserRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGroupUserRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindAll mocks base method.
func (m *MockGroupUserRepository) FindAll(ctx context.Context, query *bson.M, sorts []string) ([]*model.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGroupUserRepositoryMockRecorder) FindAll(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGroupUserRepository)(nil).FindAll), ctx, query, sorts)
}

// FindAllOrgs mocks base method.
func (m *MockGroupUserRepository) FindAllOrgs(ctx context.Context, query *bson.M, sorts []string) ([]*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrgs", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrgs indicates an expected call of FindAllOrgs.
func (mr *MockGroupUserRepositoryMockRecorder) FindAllOrgs(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrgs", reflect.TypeOf((*MockGroupUserRepository)(nil).FindAllOrgs), ctx, query, sorts)
}

// Get mocks base method.
func (m *MockGroupUserRepository) Get(ctx context.Context, name string) (*model.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*model.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupUserRepositoryMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupUserRepository)(nil).Get), ctx, name)
}

// GetByID mocks base method.
func (m *MockGroupUserRepository) GetByID(ctx context.Context, id string) (*model.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupUserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroupUserRepository)(nil).GetByID), ctx, id)
}

// GetByRole mocks base method.
func (m *MockGroupUserRepository) GetByRole(ctx context.Context, role string) (*model.GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRole", ctx, role)
	ret0, _ := ret[0].(*model.GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRole indicates an expected call of GetByRole.
func (mr *MockGroupUserRepositoryMockRecorder) GetByRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRole", reflect.TypeOf((*MockGroupUserRepository)(nil).GetByRole), ctx, role)
}

// GetOrg mocks base method.
func (m *MockGroupUserRepository) GetOrg(ctx context.Context, id string, isActive *bool) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", ctx, id, isActive)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockGroupUserRepositoryMockRecorder) GetOrg(ctx, id, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockGroupUserRepository)(nil).GetOrg), ctx, id, isActive)
}

// InsertOrg mocks base method.
func (m *MockGroupUserRepository) InsertOrg(ctx context.Context, org *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrg", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrg indicates an expected call of InsertOrg.
func (mr *MockGroupUserRepositoryMockRecorder) InsertOrg(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrg", reflect.TypeOf((*MockGroupUserRepository)(nil).InsertOrg), ctx, org)
}

// Name mocks base method.
func (m *MockGroupUserRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockGroupUserRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGroupUserRepository)(nil).Name))
}

// RunAggPipeline mocks base method.
func (m *MockGroupUserRepository) RunAggPipeline(ctx context.Context, pipeline []*bson.M, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAggPipeline", ctx, pipeline, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAggPipeline indicates an expected call of RunAggPipeline.
func (mr *MockGroupUserRepositoryMockRecorder) RunAggPipeline(ctx, pipeline, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAggPipeline", reflect.TypeOf((*MockGroupUserRepository)(nil).RunAggPipeline), ctx, pipeline, result)
}

// UpdateMany mocks base method.
func (m *MockGroupUserRepository) UpdateMany(ctx context.Context, query *bson.M, update bson.A, upsert bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, query, update, upsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockGroupUserRepositoryMockRecorder) UpdateMany(ctx, query, update, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockGroupUserRepository)(nil).UpdateMany), ctx, query, update, upsert)
}

// UpdateOrg mocks base method.
func (m *MockGroupUserRepository) UpdateOrg(ctx context.Context, org *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrg", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrg indicates an expected call of UpdateOrg.
func (mr *MockGroupUserRepositoryMockRecorder) UpdateOrg(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrg", reflect.TypeOf((*MockGroupUserRepository)(nil).UpdateOrg), ctx, org)
}

// MockGroupUserRepositoryV2 is a mock of GroupUserRepositoryV2 interface.
type MockGroupUserRepositoryV2 struct {
	ctrl     *gomock.Controller
	recorder *MockGroupUserRepositoryV2MockRecorder
	isgomock struct{}
}

// MockGroupUserRepositoryV2MockRecorder is the mock recorder for MockGroupUserRepositoryV2.
type MockGroupUserRepositoryV2MockRecorder struct {
	mock *MockGroupUserRepositoryV2
}

// NewMockGroupUserRepositoryV2 creates a new mock instance.
func NewMockGroupUserRepositoryV2(ctrl *gomock.Controller) *MockGroupUserRepositoryV2 {
	mock := &MockGroupUserRepositoryV2{ctrl: ctrl}
	mock.recorder = &MockGroupUserRepositoryV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupUserRepositoryV2) EXPECT() *MockGroupUserRepositoryV2MockRecorder {
	return m.recorder
}

// BulkUpdateById mocks base method.
func (m *MockGroupUserRepositoryV2) BulkUpdateById(ctx context.Context, orgs []*model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateById", ctx, orgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateById indicates an expected call of BulkUpdateById.
func (mr *MockGroupUserRepositoryV2MockRecorder) BulkUpdateById(ctx, orgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateById", reflect.TypeOf((*MockGroupUserRepositoryV2)(nil).BulkUpdateById), ctx, orgs)
}

// Name mocks base method.
func (m *MockGroupUserRepositoryV2) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockGroupUserRepositoryV2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGroupUserRepositoryV2)(nil).Name))
}

// MockOrganizationHistoryRepo is a mock of OrganizationHistoryRepo interface.
type MockOrganizationHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationHistoryRepoMockRecorder
	isgomock struct{}
}

// MockOrganizationHistoryRepoMockRecorder is the mock recorder for MockOrganizationHistoryRepo.
type MockOrganizationHistoryRepoMockRecorder struct {
	mock *MockOrganizationHistoryRepo
}

// NewMockOrganizationHistoryRepo creates a new mock instance.
func NewMockOrganizationHistoryRepo(ctrl *gomock.Controller) *MockOrganizationHistoryRepo {
	mock := &MockOrganizationHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockOrganizationHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationHistoryRepo) EXPECT() *MockOrganizationHistoryRepoMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockOrganizationHistoryRepo) Find(ctx context.Context, query *bson.M, sorts []string) ([]*model.OrganizationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts)
	ret0, _ := ret[0].([]*model.OrganizationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOrganizationHistoryRepoMockRecorder) Find(ctx, query, sorts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrganizationHistoryRepo)(nil).Find), ctx, query, sorts)
}

// Get mocks base method.
func (m *MockOrganizationHistoryRepo) Get(ctx context.Context, id string) (*model.OrganizationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.OrganizationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationHistoryRepoMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizationHistoryRepo)(nil).Get), ctx, id)
}

// Insert mocks base method.
func (m *MockOrganizationHistoryRepo) Insert(ctx context.Context, org *model.OrganizationHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrganizationHistoryRepoMockRecorder) Insert(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrganizationHistoryRepo)(nil).Insert), ctx, org)
}

// InsertMany mocks base method.
func (m *MockOrganizationHistoryRepo) InsertMany(ctx context.Context, orgs []*model.OrganizationHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, orgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockOrganizationHistoryRepoMockRecorder) InsertMany(ctx, orgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockOrganizationHistoryRepo)(nil).InsertMany), ctx, orgs)
}

// Name mocks base method.
func (m *MockOrganizationHistoryRepo) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockOrganizationHistoryRepoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOrganizationHistoryRepo)(nil).Name))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CountUsersV2 mocks base method.
func (m *MockUserRepository) CountUsersV2(ctx context.Context, query *bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersV2", ctx, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersV2 indicates an expected call of CountUsersV2.
func (mr *MockUserRepositoryMockRecorder) CountUsersV2(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersV2", reflect.TypeOf((*MockUserRepository)(nil).CountUsersV2), ctx, query)
}

// DeleteByID mocks base method.
func (m *MockUserRepository) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteByID), ctx, id)
}

// Find mocks base method.
func (m *MockUserRepository) Find(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserRepositoryMockRecorder) Find(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), ctx, query, sorts, offset, size)
}

// FindUsersV2 mocks base method.
func (m *MockUserRepository) FindUsersV2(ctx context.Context, query *bson.M, sorts []string, offset, size int64) ([]*model.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersV2", ctx, query, sorts, offset, size)
	ret0, _ := ret[0].([]*model.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersV2 indicates an expected call of FindUsersV2.
func (mr *MockUserRepositoryMockRecorder) FindUsersV2(ctx, query, sorts, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersV2", reflect.TypeOf((*MockUserRepository)(nil).FindUsersV2), ctx, query, sorts, offset, size)
}

// Get mocks base method.
func (m *MockUserRepository) Get(ctx context.Context, name string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, name)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, id)
}

// GetFieldStats mocks base method.
func (m *MockUserRepository) GetFieldStats(ctx context.Context, query *bson.M) (*model.SearchStatisticResponseAggs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldStats", ctx, query)
	ret0, _ := ret[0].(*model.SearchStatisticResponseAggs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldStats indicates an expected call of GetFieldStats.
func (mr *MockUserRepositoryMockRecorder) GetFieldStats(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldStats", reflect.TypeOf((*MockUserRepository)(nil).GetFieldStats), ctx, query)
}

// Name mocks base method.
func (m *MockUserRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockUserRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUserRepository)(nil).Name))
}

// UpdateByID mocks base method.
func (m *MockUserRepository) UpdateByID(ctx context.Context, id string, userUpdate *model.UpdatePublicUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, userUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserRepositoryMockRecorder) UpdateByID(ctx, id, userUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserRepository)(nil).UpdateByID), ctx, id, userUpdate)
}

// MockUserV3Repository is a mock of UserV3Repository interface.
type MockUserV3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockUserV3RepositoryMockRecorder
	isgomock struct{}
}

// MockUserV3RepositoryMockRecorder is the mock recorder for MockUserV3Repository.
type MockUserV3RepositoryMockRecorder struct {
	mock *MockUserV3Repository
}

// NewMockUserV3Repository creates a new mock instance.
func NewMockUserV3Repository(ctrl *gomock.Controller) *MockUserV3Repository {
	mock := &MockUserV3Repository{ctrl: ctrl}
	mock.recorder = &MockUserV3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserV3Repository) EXPECT() *MockUserV3RepositoryMockRecorder {
	return m.recorder
}

// CountByGroupID mocks base method.
func (m *MockUserV3Repository) CountByGroupID(ctx context.Context, groupID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByGroupID", ctx, groupID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByGroupID indicates an expected call of CountByGroupID.
func (mr *MockUserV3RepositoryMockRecorder) CountByGroupID(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByGroupID", reflect.TypeOf((*MockUserV3Repository)(nil).CountByGroupID), ctx, groupID)
}

// Create mocks base method.
func (m *MockUserV3Repository) Create(ctx context.Context, user *model.UserV3) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserV3RepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserV3Repository)(nil).Create), ctx, user)
}

// DeleteByID mocks base method.
func (m *MockUserV3Repository) DeleteByID(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserV3RepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserV3Repository)(nil).DeleteByID), ctx, id)
}

// Detail mocks base method.
func (m *MockUserV3Repository) Detail(ctx context.Context, pipeline []*bson.M) (*model.UserV3Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, pipeline)
	ret0, _ := ret[0].(*model.UserV3Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockUserV3RepositoryMockRecorder) Detail(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockUserV3Repository)(nil).Detail), ctx, pipeline)
}

// FindByID mocks base method.
func (m *MockUserV3Repository) FindByID(ctx context.Context, id primitive.ObjectID) (*model.UserV3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.UserV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserV3RepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserV3Repository)(nil).FindByID), ctx, id)
}

// FindByUserName mocks base method.
func (m *MockUserV3Repository) FindByUserName(ctx context.Context, username string) (*model.UserV3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", ctx, username)
	ret0, _ := ret[0].(*model.UserV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUserV3RepositoryMockRecorder) FindByUserName(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUserV3Repository)(nil).FindByUserName), ctx, username)
}

// FindUserV3 mocks base method.
func (m *MockUserV3Repository) FindUserV3(ctx context.Context, pipeline []*bson.M) ([]*model.UserV3Aggregate, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserV3", ctx, pipeline)
	ret0, _ := ret[0].([]*model.UserV3Aggregate)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserV3 indicates an expected call of FindUserV3.
func (mr *MockUserV3RepositoryMockRecorder) FindUserV3(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserV3", reflect.TypeOf((*MockUserV3Repository)(nil).FindUserV3), ctx, pipeline)
}

// Name mocks base method.
func (m *MockUserV3Repository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockUserV3RepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUserV3Repository)(nil).Name))
}

// StatisticV3 mocks base method.
func (m *MockUserV3Repository) StatisticV3(ctx context.Context, pipeline []*bson.M) (*model.SearchUserV3Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatisticV3", ctx, pipeline)
	ret0, _ := ret[0].(*model.SearchUserV3Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatisticV3 indicates an expected call of StatisticV3.
func (mr *MockUserV3RepositoryMockRecorder) StatisticV3(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticV3", reflect.TypeOf((*MockUserV3Repository)(nil).StatisticV3), ctx, pipeline)
}

// Update mocks base method.
func (m *MockUserV3Repository) Update(ctx context.Context, id primitive.ObjectID, data bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserV3RepositoryMockRecorder) Update(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserV3Repository)(nil).Update), ctx, id, data)
}

// MockUserHistoryRepository is a mock of UserHistoryRepository interface.
type MockUserHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockUserHistoryRepositoryMockRecorder is the mock recorder for MockUserHistoryRepository.
type MockUserHistoryRepositoryMockRecorder struct {
	mock *MockUserHistoryRepository
}

// NewMockUserHistoryRepository creates a new mock instance.
func NewMockUserHistoryRepository(ctrl *gomock.Controller) *MockUserHistoryRepository {
	mock := &MockUserHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockUserHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHistoryRepository) EXPECT() *MockUserHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserHistoryRepository) Create(ctx context.Context, userHistory *model.UserHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserHistoryRepositoryMockRecorder) Create(ctx, userHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserHistoryRepository)(nil).Create), ctx, userHistory)
}

// FindAll mocks base method.
func (m *MockUserHistoryRepository) FindAll(ctx context.Context, pipeline []*bson.M) ([]*model.UserHistory, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, pipeline)
	ret0, _ := ret[0].([]*model.UserHistory)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserHistoryRepositoryMockRecorder) FindAll(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserHistoryRepository)(nil).FindAll), ctx, pipeline)
}

// Name mocks base method.
func (m *MockUserHistoryRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockUserHistoryRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUserHistoryRepository)(nil).Name))
}

// MockScheduleRepository is a mock of ScheduleRepository interface.
type MockScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleRepositoryMockRecorder
	isgomock struct{}
}

// MockScheduleRepositoryMockRecorder is the mock recorder for MockScheduleRepository.
type MockScheduleRepositoryMockRecorder struct {
	mock *MockScheduleRepository
}

// NewMockScheduleRepository creates a new mock instance.
func NewMockScheduleRepository(ctrl *gomock.Controller) *MockScheduleRepository {
	mock := &MockScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleRepository) EXPECT() *MockScheduleRepositoryMockRecorder {
	return m.recorder
}

// GetSchedules mocks base method.
func (m *MockScheduleRepository) GetSchedules(ctx context.Context, groupID string) ([]model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedules", ctx, groupID)
	ret0, _ := ret[0].([]model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedules indicates an expected call of GetSchedules.
func (mr *MockScheduleRepositoryMockRecorder) GetSchedules(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedules", reflect.TypeOf((*MockScheduleRepository)(nil).GetSchedules), ctx, groupID)
}

// Name mocks base method.
func (m *MockScheduleRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockScheduleRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScheduleRepository)(nil).Name))
}

// MockUserSettingRepository is a mock of UserSettingRepository interface.
type MockUserSettingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSettingRepositoryMockRecorder
	isgomock struct{}
}

// MockUserSettingRepositoryMockRecorder is the mock recorder for MockUserSettingRepository.
type MockUserSettingRepositoryMockRecorder struct {
	mock *MockUserSettingRepository
}

// NewMockUserSettingRepository creates a new mock instance.
func NewMockUserSettingRepository(ctrl *gomock.Controller) *MockUserSettingRepository {
	mock := &MockUserSettingRepository{ctrl: ctrl}
	mock.recorder = &MockUserSettingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSettingRepository) EXPECT() *MockUserSettingRepositoryMockRecorder {
	return m.recorder
}

// GetUserSettings mocks base method.
func (m *MockUserSettingRepository) GetUserSettings(ctx context.Context, username string) ([]model.UserSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", ctx, username)
	ret0, _ := ret[0].([]model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockUserSettingRepositoryMockRecorder) GetUserSettings(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockUserSettingRepository)(nil).GetUserSettings), ctx, username)
}

// Name mocks base method.
func (m *MockUserSettingRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockUserSettingRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUserSettingRepository)(nil).Name))
}

// MockDefaultSettingRepository is a mock of DefaultSettingRepository interface.
type MockDefaultSettingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultSettingRepositoryMockRecorder
	isgomock struct{}
}

// MockDefaultSettingRepositoryMockRecorder is the mock recorder for MockDefaultSettingRepository.
type MockDefaultSettingRepositoryMockRecorder struct {
	mock *MockDefaultSettingRepository
}

// NewMockDefaultSettingRepository creates a new mock instance.
func NewMockDefaultSettingRepository(ctrl *gomock.Controller) *MockDefaultSettingRepository {
	mock := &MockDefaultSettingRepository{ctrl: ctrl}
	mock.recorder = &MockDefaultSettingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultSettingRepository) EXPECT() *MockDefaultSettingRepositoryMockRecorder {
	return m.recorder
}

// GetDefaultSetting mocks base method.
func (m *MockDefaultSettingRepository) GetDefaultSetting(ctx context.Context) (*model.DefaultConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultSetting", ctx)
	ret0, _ := ret[0].(*model.DefaultConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultSetting indicates an expected call of GetDefaultSetting.
func (mr *MockDefaultSettingRepositoryMockRecorder) GetDefaultSetting(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultSetting", reflect.TypeOf((*MockDefaultSettingRepository)(nil).GetDefaultSetting), ctx)
}

// Name mocks base method.
func (m *MockDefaultSettingRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockDefaultSettingRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDefaultSettingRepository)(nil).Name))
}

// MockGroupSettingRepository is a mock of GroupSettingRepository interface.
type MockGroupSettingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSettingRepositoryMockRecorder
	isgomock struct{}
}

// MockGroupSettingRepositoryMockRecorder is the mock recorder for MockGroupSettingRepository.
type MockGroupSettingRepositoryMockRecorder struct {
	mock *MockGroupSettingRepository
}

// NewMockGroupSettingRepository creates a new mock instance.
func NewMockGroupSettingRepository(ctrl *gomock.Controller) *MockGroupSettingRepository {
	mock := &MockGroupSettingRepository{ctrl: ctrl}
	mock.recorder = &MockGroupSettingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSettingRepository) EXPECT() *MockGroupSettingRepositoryMockRecorder {
	return m.recorder
}

// GetGroupSetting mocks base method.
func (m *MockGroupSettingRepository) GetGroupSetting(ctx context.Context, groupId string) ([]model.GroupSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSetting", ctx, groupId)
	ret0, _ := ret[0].([]model.GroupSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSetting indicates an expected call of GetGroupSetting.
func (mr *MockGroupSettingRepositoryMockRecorder) GetGroupSetting(ctx, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSetting", reflect.TypeOf((*MockGroupSettingRepository)(nil).GetGroupSetting), ctx, groupId)
}

// Name mocks base method.
func (m *MockGroupSettingRepository) Name() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockGroupSettingRepositoryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGroupSettingRepository)(nil).Name))
}
